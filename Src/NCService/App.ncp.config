<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<appSettings>
		<!-- 
			Application level settings to be defined here 
		-->
		<!--
      Specify the port at which Cache Server will listen for the incoming connection requests
    -->
		<add key="NCacheServer.Port" value="9800"/>
		<!--
      Specify send buffer size of the connected client socket, in bytes.
    -->
		<add key="NCacheServer.SendBufferSize" value="131072"/>
		<!--
      Specify whether this service will log license information for the clients.
    -->
		<add key="NCacheServer.LicenseLogging" value="false"/>
		<!--
      Specify receive buffer size of the connected client socket, in bytes.
    -->
		<add key="NCacheServer.ReceiveBufferSize" value="131072"/>
		<!--
      When your machine has more than one network cards, you can inform NCache
			which interface to use for cluster-wide communication. In order to do so, 
      provide the Ip Address you want the cluster server to bind with.
		-->
		<!--WISEMETA: value="[CLIENTIP]"--><add key="NCacheServer.BindToClusterIP" value=""/>
		<!--
      When your machine has more than one network cards, you can inform NCache
			which interface to use for client commnunication. In order to do so, please 
			provide the Ip Address you want the client's (NCache client) server to bind with.
		-->
		<!--WISEMETA: value="[CLIENTIP]"--><add key="NCacheServer.BindToClientServerIP" value=""/>
		<!--
      All the nodes in NCache cluster can establish two connections with each node. 
      This can increase the TCP throughput and thus improve the overall performance.
      By default single connection is established. To enable the use of dual connections,
      uncomment the following.
    -->
		<!--
    <add key="NCacheServer.EnableDualSocket" value="true"/>
    -->
		<!--
      To improve the cluster performance NCache takes benefit from Nagling. 
      It means that NCache tries to avoid the network trip for each single message 
      and instead combines multiple messages together (if waiting for the socket IO) 
      to be sent as single network operation. 
      To disable Nagling, uncomment the following.
    -->
		<!--<add key="NCacheServer.EnableNagling" value="false"/>-->
		<!--
      Naggling bundles all the available messages waiting for the socket IO whose combined size 
      is less than the given Nagling size. The default Nagling size is 500 Kb. It can be modified
      according to the needs.
    -->
		<add key="NCacheServer.NaglingSize" value="500"/>
		<!--
      You can configure some caches to start as the NCache service starts. As, by default NCache service 
      starts at the system startup so these settings are useful incase you want some cahces to autostart at
      the system startup.
    -->
		<add key="NCacheServer.AutoStartCache" value="mysharepointcache"/>
		<!--<add key="NCacheServer.CacheUser" value="domain\userId"/>
      <add key="NCacheServer.CachePassword" value="password"/>
    -->
		<!--
      Some performance counters are disabled by default but they can be really helpful to see the NCache behavior 
      over the network. 
      
      These counters include: -
      1. socket send time (time taken for the last send operation)
      2. socket receive time (time taken for the last receive operation)
      3. bytes sent / second 
      4. bytes received / second
      5. naggling message count (number of messages bundled together in the last socket send operation)
      
      These counters help find the source of the problem incase we see the cluster is not performing as expected.
      To enable these counters, uncomment the following.
    -->
		<!--<add key="NCacheServer.EnableDebuggingCounters" value="true"/>-->
		<!--
    NCache publishes its important statistics over WMI service. NCMonitor is a tool for the cluster monitoring 
    that takes advantage of these published statistics. You can control how frequently NCache should update these
    WMI statistics by changing the NCacheServer.WmiStatsUpdateInterval value given below. More frequent updation can cause
    NCache performance degradation.
    -->
		<add key="NCacheServer.WMIStatsUpdateInterval" value="5"/>
		<!--
    Expired items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation.
    -->
		<add key="NCacheServer.ExpirationBulkRemoveSize" value="10"/>
		<!--
    Expired items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
		<add key="NCacheServer.ExpirationBulkRemoveDelay" value="0"/>
		<!--
    During eviction items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation. EvictionBulkRemoveSize should be specified in multiple of 300
    -->
		<add key="NCacheServer.EvictionBulkRemoveSize" value="10"/>
		<!--
    During eviction items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
		<add key="NCacheServer.EvictionBulkRemoveDelay" value="0"/>
		<!--
    For Mirror and Partitioned Replica Cache Topologies items are asynchronously replicated to the backup nodes in bulk. This
    is the number of items in one bulk sent to the backup node in single async call.
    -->
		<add key="NCacheServer.BulkItemsToReplicate" value="50"/>
		<!-- Following four options allows a user to get information about data in cache having sliding expiration. These counters
    help finding and controlling following tasks...
    i.   How many items are present in cache, being not accessed since given interval or more.
    ii.  Log all those keys being not accessed since given interval or more.
    iii. Collect and Log above mentioned data from cache after given interval of time.
    -->
		<!--(1) Enable/Disable collecting LastAccessCount data -->
		<add key="NCacheServer.EnableCacheLastAccessCount" value="false"/>
		<!--(2) Enable Logging of Keys into a log file (created under logs folder). This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true"-->
		<add key="NCacheServer.EnableCacheLastAccessCountLogging" value="false"/>
		<!--(3) Time interval for a key not been accessed for last given minutes. Value is in Mins. A value of 30 would allow NCache 
    server to collect all those keys that are idle since last 30 or more minutes. This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true"-->
		<add key="NCacheServer.CacheLastAccessCountInterval" value="10"/>
		<!--(4) Logging interval to allow logging in multiple intervals. Its value is not in minutes. Its value is number of clean intervals
    after which keys should be logged into file. CleanInterval is specified under Cache's "Policies" tab.
    If value of this variable is "4" and clean interval is 15(secs).Logging would happen after every 60 secs.    
    Interval based logging allows NCache to perform without any performance degradation despite certain information
    is collected from core components to peroform this action .This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true" AND NCacheServer.EnableCacheLastAccessCountLogging is set "true" -->
		<add key="NCacheServer.CacheLastAccessLogInterval" value="40"/>
		<!--A buffer having size greater than 80Kb is created on the Large Object heap(LOH). Garbage Collector doesn't compact
    the larg heap for its better performance. Therefore NCache uses a pool for large buffers. NCache reserves two buffers per
    client. These buffers are allocted through LOH buffer pool. LOHPoolSize referes to the initial size of the pool i.e how many
    buffers are allocated initially. LOH pool can increase its size by LOHPoolSize on demand.
    -->
		<add key="NCacheServer.LOHPoolSize" value="40"/>
		<!--
    LOHPoolBufferSize is the size of an idividual buffer allocted by LOH Pool. Default buffer size is 512Kb.
    -->
		<add key="NCacheServer.LOHPoolBufferSize" value="512"/>
	</appSettings>
	<runtime>
		<gcConcurrent enabled="true"/>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<publisherPolicy apply="no"/>
			<!-- 
				In order to deploy an assembly you can copy the assembly into the deployed folder
				or a folder of your choice and add the folder's name to privatePath. This works
				even for assemblies that are not signed. 
			-->
			<!--<probing privatePath="deployed"/> -->
			<!-- 
				In order to deploy an assembly you have to create the following entry in 
				this file and restart NCache service. Only assemblies with strong names
				can be deployed this way. Note that you do not need this if you intend to
				put the assembly into the GAC. 

				<dependentAssembly>
					<assemblyIdentity name="assemblyName" culture="" publicKeyToken="xxxxxxxxxxxxxxxx" />
					<codeBase version="1.0.0.0" href="file:///c:/localfile/filename.dll" />
				</dependentAssembly>
			-->
			<!--
				The following assemblies are for NorthwindDemoApp samples.
			-->
			<dependentAssembly>
				<assemblyIdentity name="Components" publicKeyToken="e0d98da978eb7155"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/northwinddemo/components/bin/components.dll"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="EnterpriseNonServicedLibEval" publicKeyToken="14ae5b451349ed71"/>
				<codeBase version="1.0.2012.26766" href="../../samples/clr20/northwinddemo/framework/enterprisenonservicedlibeval.dll"/>
			</dependentAssembly>
			<!--
				The following assemblies are for ChatRoom sample.
			-->
			<dependentAssembly>
				<assemblyIdentity name="Chatroom" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/chatroom/bin/chatroom.exe"/>
			</dependentAssembly>
			<!--
				The following assemblies are for Compact serialization sample.
			-->
			<dependentAssembly>
				<assemblyIdentity name="CompactSerializationSample" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/CompactSerializationSample/bin/CompactSerializationSample.exe"/>
			</dependentAssembly>
			<!--
				The following assemblies are required by Directory sample.
			-->
			<dependentAssembly>
				<assemblyIdentity name="Directory.Business" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/directory/business/bin/directory.business.dll"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Directory.Providers.Sql" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/directory/providers/sql/bin/directory.providers.sql.dll"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Directory.Providers.Oledb" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/directory/providers/oledb/bin/directory.providers.oledb.dll"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Directory.Providers.Xml" publicKeyToken="4fa376842ff2847f"/>
				<codeBase version="1.0.0.0" href="../../samples/clr20/directory/providers/xml/bin/directory.providers.xml.dll"/>
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
</configuration>
