<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- 
			Application level settings to be defined here 
		-->
    <!--
      Specify the port at which Cache Server will listen for the incomming connection requests
    -->
    <add key="NCacheServer.Port" value="9800"/>

    <!--
      When your machince has more than one network cards, you can inform NCache
			which interface to use for cluster-wide commnunication. In order to do so, 
      provide the Ip Address you want the cluster server to bind with.
		-->
    <add key="NCacheServer.BindToClusterIP" value="" />
    
    <!--
      When your machince has more than one network cards, you can inform NCache
			which interface to use for client commnunication. In order to do so, please 
			provide the Ip Address you want the client's (NCache client) server to bind with.
		-->
    <add key="NCacheServer.BindToClientServerIP" value="" />
    
    <!--
    Expired items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation.
    -->
    <add key="NCacheServer.ExpirationBulkRemoveSize" value="10"/>
    
    <!--
    Expired items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
    <add key="NCacheServer.ExpirationBulkRemoveDelay" value="0"/>
    
    <!--
    During eviction items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation. EvictionBulkRemoveSize should be specified in multiple of 300
    -->
    <add key="NCacheServer.EvictionBulkRemoveSize" value="10"/>
    
    <!--
    During eviction items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
    <add key="NCacheServer.EvictionBulkRemoveDelay" value="0"/>
    
    <!--
      Following section describes how you can enable some caches to start as the NCache service starts.
      These settings are usefull incase you want some caches to autostart at system startup.
    -->
    <!--
    <add key="NCacheServer.AutoStartCache" value="mycache,myreplicatedcache"/>
    -->
    
  </appSettings>
  <runtime>
    
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <publisherPolicy apply="no" />
      <!-- 
				In order to deploy an assembly you can copy the assembly into the deployed folder
				or a folder of your choice and add the folder's name to privatePath. This works
				even for assemblies that are not signed. 
			-->
      <probing privatePath="deployed" />

      <!-- 
				In order to deploy an assembly you have to create the following entry in 
				this file and restart NCache service. Only assemblies with strong names
				can be deployed this way. Note that you do not need this if you intend to
				put the assembly into the GAC. 

				<dependentAssembly>
					<assemblyIdentity name="assemblyName" culture="" publicKeyToken="xxxxxxxxxxxxxxxx" />
					<codeBase version="1.0.0.0" href="file:///c:/localfile/filename.dll" />
				</dependentAssembly>
			-->
    </assemblyBinding>
  </runtime>
</configuration>