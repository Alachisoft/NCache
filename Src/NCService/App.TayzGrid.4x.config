<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<appSettings>
		<!-- 
			Application level settings to be defined here 
		-->
		<!--
      Specify the port at which Cache Server will listen for the incoming connection requests
    -->
		<add key="CacheServer.Port" value="9600"/>
		<!--
      Specify the port at which Cache Management Server will listen for the incoming connection requests
    -->
		<add key="CacheServer.ManagementPort"  value="8270"/>
		<!--
      Specify send buffer size of the connected client socket, in bytes.
    -->
		<add key="CacheServer.SendBufferSize" value="131072"/>

		<!--
      Specify whether this service will log license information for the clients.
    -->
		<add key="CacheServer.LicenseLogging" value="false"/>

		<!--
      Specify receive buffer size of the connected client socket, in bytes.
    -->
		<add key="CacheServer.ReceiveBufferSize" value="131072"/>

		<!--
      When your machine has more than one network cards, you can inform TayzGrid
			which interface to use for cluster-wide communication. In order to do so, 
      provide the Ip Address you want the cluster server to bind with.
		-->


		<add key="CacheServer.BindToClusterIP" value="" />

		<!--
      When your machine has more than one network cards, you can inform TayzGrid
			which interface to use for client communication. In order to do so, please 
			provide the Ip Address you want the client's (TayzGrid client) server to bind with.
		-->


		<add key="CacheServer.BindToClientServerIP" value="" />

		<!--
      All the nodes in TayzGrid cluster can establish two connections with each node. 
      This can increase the TCP throughput and thus improve the overall performance.
      By default single connection is established. To enable the use of dual connections,
      un comment the following.
    -->

		<!--
    <add key="CacheServer.EnableDualSocket" value="true"/>
    -->

		<!--
      To improve the cluster performance TayzGrid takes benefit from Nagling. 
      It means that NCache tries to avoid the network trip for each single message 
      and instead combines multiple messages together (if waiting for the socket IO) 
      to be sent as single network operation. 
      To disable Nagling, uncomment the following.
    -->

		<!--<add key="CacheServer.EnableNagling" value="false"/>-->

		<!--
      Nagling bundles all the available messages waiting for the socket IO whose combined size 
      is less than the given Nagling size. The default Nagling size is 500 Kb. It can be modified
      according to the needs.
    -->
		<add key="CacheServer.NaglingSize" value="500"/>
		<!--
      <add key="CacheServer.CacheUser" value="domain\userId"/>
      <add key="CacheServer.CachePassword" value="password"/>
    -->

		<!--
      Some performance counters are disabled by default but they can be really helpful to see the TayzGrid behavior
      over the network. 
      
      These counters include: -
      1. socket send time (time taken for the last send operation)
      2. socket receive time (time taken for the last receive operation)
      3. bytes sent / second 
      4. bytes received / second
      5. nagling message count (number of messages bundled together in the last socket send operation)
      
      These counters help find the source of the problem in case we see the cluster is not performing as expected.
      To enable these counters, uncomment the following.
    -->

		<!--<add key="CacheServer.EnableDebuggingCounters" value="true"/>-->

		<!--
    Expired items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation.
    -->
		<add key="CacheServer.ExpirationBulkRemoveSize" value="50"/>

		<!--
    Expired items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
		<add key="CacheServer.ExpirationBulkRemoveDelay" value="1"/>

		<!--
    During eviction items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation. EvictionBulkRemoveSize should be specified in multiple of 300
    -->
		<add key="CacheServer.EvictionBulkRemoveSize" value="900"/>

		<!--
    During eviction items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
    -->
		<add key="CacheServer.EvictionBulkRemoveDelay" value="1"/>
		
		<!--
    By default SQLDependency creates a new Service whenever it starts but you can also use the existing SQL Service.
    In that case NCache will connect with pre-created service with following naming convention
    "SQLService-[ip-address]". If you want to change the sql service name prefix you can specify that against CacheServer.SQLNotificationService key
    -->
		<add key="CacheServer.SQLNotificationService" value="SQLService"/>

		<!--
    By default SQLDependency creates a new Queue whenever it starts but you can also use the existing SQL Queue.
    In that case TayzGrid will connect with pre-created queue with following naming convention
    "SQLQueue-[ip-address]". If you want to change the sql queue name prefix you can specify that against CacheServer.SQLNotificationQueue key
    -->
		<add key="CacheServer.SQLNotificationQueue" value="SQLQueue"/>
		
		<!--
    CacheServer.ResponseDataSize indicates the size of a response for a given request.
    If the response size is larger than the given limit then it will be divided into smaller
    chunks and data will be sent back to the client in multiple responses for the same request.
    This will improve the performance because the larger the response size is the longer it
    will take time to serialize the response. However, these multiple responses will be merged
    by TayzGrid Client as a single response.   
    Here it takes value in MB’s. Default size is 1024MB.
    NOTE: .NET serialization fails to serialize if the response size is larger than 1.9 GB.
    -->
		<add key="CacheServer.ResponseDataSize" value="1024"/>

		<!--
    CacheServer.SnapshotPoolingCacheSize can be used to specify the size of the cache (in terms of number of items) for enabling enumeration snapshot pooling. 
    It will help in deciding when to create a pool of snapshots for enumeration purpose. when a new enumerator is taken on cache we provide it with a 
    snapshot of cache, every time a new enumerator is taken on cache but when this threshold size is crossed we will create a pool of snapshots that will hold
    snapshots based on time slicing and snapshots will be provided from the pool when an enumerator needs one. 
    Default Size is 100000 items in cache
    -->
		<add key="CacheServer.EnableSnapshotPoolingCacheSize" value="100000"/>

		<!--
    CacheServer.SnapshotPoolSize can be used to specify the number of snapshots allowed in the pool for enumeration. when the maximum size is reached 
    we won’t allow another snapshot to be added to the pool till another existing snapshot in the pool has been removed from it.     
    Default Size is 10 snapshots in cache snapshot pool.
    -->
		<add key="CacheServer.SnapshotPoolSize" value="10"/>

		<!--
    CacheServer.SnapshotCreationThreshold can be used to specify after how many seconds a new snapshot will be added to pool for enumeration purpose.
    Same cache snapshot from the pool is provided to all enumerators on cache until the threshold time is elapsed. Any enumerator that requests 
    a snapshot after that will get a new snapshot from the pool.
    Default size is 30 seconds.
    -->
		<add key="CacheServer.SnapshotCreationThreshold" value="30"/>

		<!--
    CacheServer.EnumeratorChunkSize can be used to specify the chunk size as in number of items returned to enumerator from cache server. Once the enumerator is done enumerating through a chunk of data it gets the next chunk from the cache for that 
    particular enumerator and continues enumerating.
    Default size is 1000 items returned in each chunk.
    -->
		<add key="CacheServer.EnumeratorChunkSize" value="1000"/>

	</appSettings>

	<runtime>
		<gcServer enabled="true"/>
		<gcConcurrent enabled="false"/>
	</runtime>
</configuration>
