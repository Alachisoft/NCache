<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alachisoft.NCache.Web</name>
    </assembly>
    <members>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheEventDescriptor">
            <summary>
            Instance of this class holds the link to the registered delegate
            Keep it safe and use it to unregister the registered delegate when required.
            The bool <see cref="P:Alachisoft.NCache.Web.Caching.CacheEventDescriptor.IsRegistered"/> returns false when the discriptor has been consumed to unregister the delegate.
            Then this instance can then be disposed of. Upon re-registering for the interested event, a new discriptor will be created.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventDescriptor.IsRegistered">
            <summary>
            Returns true if the linked event delegate is registered, returns false when the descriptor has been consumed
            This property is ThreadSafe
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventDescriptor.CacheName">
            <summary>
            Name of the cache registered against
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventDescriptor.RegisteredAgainst">
            <summary>
            Event Types registered against. Can be ORed to check registeration types
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventDescriptor.Handle">
            <summary>
            Cannot reset once created
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.RemoteCache">
            <summary>
            Implements the clustered cache for an application. This class cannot be inherited.
            </summary>
            <remarks>
            One instance of this class is created per application domain, and it remains 
            valid as long as the application domain remains active. This object is accessible through the 
            <see cref="!:NCache.Cache"/> property of the <see cref="T:Alachisoft.NCache.Web.Caching.NCache"/> object
            </remarks>
            <requirements>
            </requirements>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheImplBase.Add(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[])">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache.
             </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <returns>keys that are added or that alredy exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with a sliding expiration of 5 minutes, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"ORD_23", "ORD_67"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(new Order());
             items[0].SlidingExpiration = new TimeSpan(0,5,0);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(new Order());
             items[1].SlidingExpiration = new TimeSpan(0,5,0);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
            	NCache.Cache.Add(keys, items);
             
            	Cache.Add(keys, items);
             
             </code>
             </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.RemoteCache.NoAbsoluteExpiration">
            <summary>
            Used in the <paramref name="_absoluteExpiration"/> parameter in an Insert method call to 
            indicate the item should never expire. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="_absoluteExpiration"/> parameter equal 
            to <see cref="F:System.DateTime.MaxValue"/>, which is a constant representing the largest possible 
            <see cref="T:System.DateTime"/> value, 12/31/9999 11:59:59 PM.</remarks>
            <example>The following example demonstrates how to use the <see cref="F:Alachisoft.NCache.Web.Caching.RemoteCache.NoAbsoluteExpiration"/> field to disable 
            absolute expirations when inserting an item in the <see cref="N:Alachisoft.NCache.Web"/>.
            <code>
            
            NCache.Web.Insert("DSN", connectionString, null, Web.NoAbsoluteExpiration, TimeSpan.FromSeconds(10));
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.RemoteCache.NoSlidingExpiration">
            <summary>
            Used as the <paramref name="_slidingExpiration"/> parameter in an Insert method call 
            to disable sliding expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="_slidingExpiration"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. The cached item then expires 
            in accordance with the <paramref name="_absoluteExpiration"/> parameter.</remarks>
            <example>The following example demonstrates how to use the Insert method to add an item to the 
            <see cref="N:Alachisoft.NCache.Web"/> object using the <see cref="F:Alachisoft.NCache.Web.Caching.RemoteCache.NoSlidingExpiration"/> field.
            <code>
            
            NCache.Web.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), Web.NoSlidingExpiration);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.RegisterNodeJoinedEvent(Alachisoft.NCache.Web.Communication.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.RegisterNodeLeftEvent(Alachisoft.NCache.Web.Communication.Connection)">
            <summary>
            Will be called by broker incase of multiple connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Add(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[])">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache.
             </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <returns>keys that are added or that alredy exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with an absolute 
             expiration 2 minutes from now, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"ORD_23", "ORD_67"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(new Order());
             items[0].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(new Order());
             items[1].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
            	NCache.Cache.Add(keys, items);
            
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Add(keys, items);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Insert(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[])">
              <summary> Insert list of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="!:CacheItemRemovedCallback"/> 
            	delegate, see <see cref="!:CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
            
            	NCache.Cache.Insert(keys, items);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Insert(keys, items);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Get(System.String,Alachisoft.NCache.Common.BitSet,Alachisoft.NCache.Web.Caching.LockHandle@,System.TimeSpan,Alachisoft.NCache.Caching.LockAccessType)">
            <summary>
            Retrieves the specified item from the Cache object. If the object is read thru the data source,
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
             <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            
            NCache.Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Get("MyTextBox.Value", "Customer", null);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Get(System.String[],Alachisoft.NCache.Common.BitSet)">
             <summary>
             Retrieves the object from the cache for the given keys as key value pairs
             </summary>
            <param name="keys">The keys against which items are to be fetched.</param>
            <returns>The retrieved cache items.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
             box server control.
             <code>
             
            	NCache.Cache.Get(keys);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Get(keys);
             
             </code> 
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.</param>
            <returns><b>true</b> if the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            
            if(NCache.Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            if(Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Remove(System.String,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType)">
             <summary>
             Removes the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="key">The cache key used to reference the item.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Delete(System.String,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType)">
             <summary>
             Removes the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="flagMap"></param>
            <param name="lockId"></param>
            <param name="accessType"></param>        /// <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Remove(System.String[],Alachisoft.NCache.Common.BitSet)">
             <summary>
             Removes the objects from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <param name="flagMap"></param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
             is not found, returns a null reference (Nothing in Visual Basic).</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how you can remove an item from your application's 
             <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
             <code>
             
            	NCache.Cache.Remove(keys);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Remove(keys);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Delete(System.String[],Alachisoft.NCache.Common.BitSet)">
             <summary>
             Removes the objects from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <param name="flagMap"></param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
             is not found, returns a null reference (Nothing in Visual Basic).</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how you can remove an item from your application's 
             <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
             <code>
             
            	NCache.Cache.Remove(keys);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Remove(keys);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Clear(Alachisoft.NCache.Common.BitSet)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            
            NCache.Cache.Clear();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Clear();
            
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.RemoteCache.Search(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.RemoteCache.SearchEntries(System.String,System.Collections.IDictionary)" -->
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values 
            contained in the cache.
            </summary>
            <remarks>
            If items are added or removed from the cache while enumerating through the items
            the behavior is not predictable. It is therefore advised not to update the cache keys
            while enumerating.
            <para><b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Web.Caching.Cache.Count"/> in a cluster especially partitioned 
            this operation is an expensive one and may require network calls. It is therefore advised to use 
            this method only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.Dispose(System.Boolean)">
            <summary>
            Decerements the reference count of the cache and performs application-defined tasks 
            associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.RemoteCache.CacheId">
            <summary>
            Get the name of this cache
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.RemoteCache.ServerId">
            <summary>
            Get the server name with which this cache is connected
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Alachisoft.NCache.Web.Caching.RemoteCache.EventListener" -->
        <member name="P:Alachisoft.NCache.Web.Caching.RemoteCache.AsyncEventHandler">
            <summary>
            Gets the Asynchronous event listener for the remote cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.RemoteCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <remarks>This property can be useful when monitoring your application's performance 
            or when using ASP.NET tracing functionality.
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.RemoteCache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.CacheAsyncEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.RemoteCache.CacheEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.CacheEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.RemoteCache.ClusterEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.RemoteCache.ClusterEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.ClusterEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.RemoteCache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.LockHandle">
            <summary>
            An instance of this class is used to lock and unlock the cache items in pessimistic concurrency model.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.LockHandle.#ctor">
            <exclude/>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.LockHandle.#ctor(System.String,System.DateTime)">
            <exclude/>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.LockHandle.LockId">
            <summary>
            Gets and sets the lock-id.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.LockHandle.LockDate">
            <summary>
            Gets and sets the lock-date.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Connection.AssureSend(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            This method is used by the naggling manager to send the naggled data.
            We pass a fixed sized buffer to this method that contains the naggled data.
            One extra argument 'bytesToSent' tells how many bytes we need to send from this buffer.
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="bytesToSent"></param>
            <param name="checkConnected"></param>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.Connection.IpAddress">
            <summary>
            Get ip address of machine to which connection is made
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.Connection.Port">
            <summary>
            Get port on which connection is made
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._key">
            <summary> </summary>		
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._type">
            <summary> Represents the _type of the response.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._requestId">
            <summary> Requested requestId of the command.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._callbackId">
            <summary> CallbackId which will be used to get actual callback from callback table</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._reason">
            <summary> Remove reason if item is removed.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._value">
            <summary> Object</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._notifId">
            <summary>Notification Id</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._brokerReset">
            <summary>Tells if the broker is reset due to lost connection</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._resetConnectionIP">
            <summary>Tells with which ip connection is broken</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._asyncOpResult">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._operationCode">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._cacheId">
            <summary></summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._resultDic">
            <summary> Hold the result bulk operations </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._resultList">
            <summary>Hold the getGroupKeys from search </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._bucketSize">
            <summary>Hold bucket size returned from server</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._totalBuckets">
            <summary>Hold total number of buckets count</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._cacheItem">
            <summary> CacheItem object used to return CacheItem form GetCacheItem command</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Command.CommandResponse._sequenceId">
            <summary>
            by default one response is sent back for each request. If required, a single response
            can be segmented into smaller chunks. In that case, these properties must be properly set.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Command.CommandResponse.#ctor(System.Boolean,Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Creates a new instance of CacheResultItem 
            <param name="brokerReset">True if broker is reset due to lost connection, false otherwise</param>
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Command.CommandResponse.BucketSize">
            <summary>
            Get size of each bucket
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Command.CommandResponse.TotalBuckets">
            <summary>
            Get total number of buckets
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.EventUtil.ConvertToItem(Alachisoft.NCache.Caching.EventCacheEntry)">
            <summary>
            For Inproc only
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2">
            <summary>
            Summary description for PerfStatsCollector.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.PC_CATEGORY">
            <summary> Category name of counter performance data.</summary>
            
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._instanceName">
            <summary> Instance name. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcGetPerSec">
            <summary> performance counter for Cache get operations per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcAddPerSec">
            <summary> performance counter for Cache add operations per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcUpdPerSec">
            <summary> performance counter for Cache update operations per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcDelPerSec">
            <summary> performance counter for Cache remove operations per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcReqrQueueSize">
            <summary> performance counter for Mirror Queue size. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerGetAvg">
            <summary> performance counter for Cache avg. per milli-second time of get operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerAddAvg">
            <summary> performance counter for Cache avg. per milli-second time of add operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerUpdAvg">
            <summary> performance counter for Cache avg. per milli-second time of update operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerDelAvg">
            <summary> performance counter for Cache avg. per milli-second time of remove operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerGetBase">
            <summary> performance counter for Cache max. per milli-second time of get operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerAddBase">
            <summary> performance counter for Cache max. per milli-second time of add operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerUpdBase">
            <summary> performance counter for Cache max. per milli-second time of update operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerDelBase">
            <summary> performance counter for Cache max. per milli-second time of remove operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerEventAvg">
            <summary> performance counter for Cache avg. per milli-second time of Event operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcMsecPerEventBase">
            <summary> performance counter for Cache max. per milli-second time of Event operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcEventProcesedPerSec">
            <summary> performance counter for events processed per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcEventTriggeredPerSec">
            <summary> performance counter for events Triggered/Received per second. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcAvgItemSize">
            <summary> performance counter for</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._pcAvgItemSizeBase">
            <summary> base performance counter for</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._usMsecPerGet">
            <summary> usage statistics for Cache per milli-second time of get operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._usMsecPerAdd">
            <summary> usage statistics for Cache per milli-second time of add operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._usMsecPerUpd">
            <summary> usage statistics for Cache per milli-second time of update operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._usMsecPerDel">
            <summary> usage statistics for Cache per milli-second time of remove operations. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2._usMsecPerEvent">
            <summary> usage statistics for Cache per milli-second time of event operations. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="instanceName"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="instanceName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.GetInstanceName(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates Instancename 
            For outproc instanceName = CacheID
            For inProc instanceNAme = CacheID +"-" + ProcessID + ":" +port
            </summary>
            <param name="name"></param>
            <param name="port"></param>
            <param name="inProc"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.InitializePerfCounters(System.Boolean)">
            <summary>
            Initializes the counter instances and category.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementGetPerSecStats">
            <summary> 
            Increment the performance counter for Cache get operations per second. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementAddPerSecStats">
            <summary> 
            Increment the performance counter for Cache add operations per second. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementUpdPerSecStats">
            <summary> 
            Increment the performance counter for Cache update operations per second. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementDelPerSecStats">
            <summary> Increment the performance counter for Cache remove operations per second. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementAvgEventProcessingSample(System.Int64)">
            <summary>
            Timestamps the start of sampling interval for Cache avg. and max. per mill-second time of 
            event operations. 
            </summary>s
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementEventsProcessedPerSec">
            <summary> 
            Increment the performance counter for Responses received Per second by all the clients. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementEventsTriggeredPerSeconds">
            <summary> 
            Increment the performance counter for Responses received Per second by all the clients. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementMsecPerSerialization(System.Int64)">
            <summary>
            Increments the performance counter for Average �s/serialization.
            </summary>
            <param name="value">Value to increment by</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementAvgItemSize(System.Int64)">
            <summary>
            Increments the performance counter for Average Item Size.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerGetBeginSample">
            <summary>
            Timestamps the start of sampling interval for Cache avg. and max. per mill-second time of 
            fetch operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerGetEndSample">
            <summary>
            Timestample and updates the counter for Cache avg. and max. per mill-second time of 
            fetch operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerAddBeginSample">
            <summary>
            Timestamps the start of sampling interval for Cache avg. and max. per mill-second time of 
            add operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerAddEndSample">
            <summary>
            Timestample and updates the counter for Cache avg. and max. per mill-second time of 
            add operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerUpdBeginSample">
            <summary>
            Timestamps the start of sampling interval for Cache avg. and max. per mill-second time of 
            update operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerUpdEndSample">
            <summary>
            Timestample and updates the counter for Cache avg. and max. per mill-second time of 
            update operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerDelBeginSample">
            <summary>
            Timestamps the start of sampling interval for Cache avg. and max. per mill-second time of 
            remove operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.MsecPerDelEndSample">
            <summary>
            Timestample and updates the counter for Cache avg. and max. per mill-second time of 
            remove operations. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.IncrementRequestQueueSizeStats">
            <summary> 
            Increment the performance counter for Mirror Queue size by one. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.DecrementRequestQueueSizeStats">
            <summary> 
            Decrement the performance counter for Mirror Queue size by one. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.InstanceName">
            <summary>
            Returns true if the current user has the rights to read/write to performance counters
            under the category of object cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Statistics.PerfStatsCollector2.UserHasAccessRights">
            <summary>
            Returns true if the current user has the rights to read/write to performance counters
            under the category of object cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheCollection">
            <summary>
            Represents a collection of the caches initialized within the same application domain. 
            </summary>
            <remarks>An instance of this class can not be created. The class implements the IEnumerable 
            interface.
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheCollection.GetEnumerator">
            <summary>
            Returns a <see cref="T:Alachisoft.NCache.Web.Caching.CacheCollectionEnumerator"/> to enumerate
            over the caches contained in the collection.
            </summary>
            <returns><see cref="T:Alachisoft.NCache.Web.Caching.CacheCollectionEnumerator"/></returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheCollection.Item(System.String)">
            <summary>
            Gets the Cache instance at the specified key.
            </summary>
            <param name="cacheId">The cache id that uniquely identifies each cache instance</param>
            <returns>Alachisoft.NCache.Web.Caching.Cache instance</returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheCollection.Count">
            <summary>
            The count of the caches contained in the collection.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Communication.ConnectionPool">
            <summary>
            Hold connection objects and hashmap from partition and partition of replica.
            Makes decision on bases of key and hashmap.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.GetConnection(System.String)">
            <summary>
            Get connection to server on which the item is residing.
            If no connection exists, null will be returned.
            </summary>
            <param name="key">key of item</param>
            <returns>connection to server on which item is residing</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.GetIpInternal(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.GetIp(System.String)">
            <summary>
            Get ip address of server on which key resides
            </summary>
            <param name="key">key</param>
            <returns>ip address of server</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.SetHashmap(Alachisoft.NCache.Common.DataStructures.NewHashmap)">
            <summary>
            Set new hashmap to this new hashmap
            </summary>
            <param name="hashMap">new hashmap</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.Add(Alachisoft.NCache.Common.Net.Address,Alachisoft.NCache.Web.Communication.Connection)">
            <summary>
            Add connection to pool. If connection already exists, it will be replaced with new
            connection instance
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
            <param name="connection">connection object</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.Remove(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Remove connection from pool
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.Contains(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Check whether connection pool contains specified connection
            </summary>
            <param name="ip">ip address of machine to which connection is made</param>
            <returns>true if the connection exists, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.ConnectionPool.CloneConnectionTable">
            <summary>
            Clone connection table.
            </summary>
            <returns>cloned connection table</returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.ConnectionPool.Item(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Get or set connection in connection pool
            </summary>
            <param name="ip">ip of system to which connection is made</param>
            <returns>connection object</returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.ConnectionPool.BucketSize">
            <summary>
            Get or set bucket size
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.ConnectionPool.Count">
            <summary>
            Get count of connection in pool
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Communication.ConnectionPool.LastViewId">
            <summary>
            Get last view id that published this hashmap
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheInitParams.Clone">
            <summary>
            Creates Clone for deep copy of the initParam
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheInitParams.Initialize(System.String)">
            <summary>
            Reads the client.ncconf to set the parameters user has not provided values for.
            If the client.ncconf is not found or the values for some parameters are not set in client.ncconf,
            then default values are set for such parameters.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.ServerList">
            <summary>
            Gets/Sets List of servers provided by the user
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.BindIP">
            <summary>
            Gets/Sets the IP for the client to be binded with
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.Mode">
            <summary>
            Gets/Sets the cache mode (inproc/outproc)
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.LoadBalance">
            <summary>
            When this flag is set, client tries to connect to the optimum server in terms of number of connected clients.
            This way almost equal number of clients are connected to every node in the clustered cache and no single node 
            is overburdened.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.ClientRequestTimeOut">
            <summary>
            Clients operation timeout specified in seconds.
            Clients wait for the response from the server for this time. 
            If the response is not received within this time, the operation is not successful.
            Based on the network conditions, OperationTimeout value can be adjusted. 
            The default value is 90 seconds.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.ConnectionTimeout">
            <summary>
            Client's connection timeout specified in seconds.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.ConnectionRetries">
            <summary>
            Number of tries to re-establish a broken connection between client and server.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.RetryInterval">
            <summary>
            Time in seconds to wait between two connection retries.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheInitParams.RetryConnectionDelay">
            <summary>
            The time after which client will try to reconnect to the server.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheStoppedCallback">
             <summary>
             Defines a callback method for notifying applications when the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> is stopped.
             </summary>
             <param name="cacheId">The Identification of the cache being stopped. It is helpful as multiple cache instances 
             can exists with in the same application.</param>
             <remarks>This handler is invoked when a <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> is stopped.</remarks>
             <example>The following example demonstrates how to use the <see cref="T:Alachisoft.NCache.Web.Caching.CacheStoppedCallback"/> class to notifiy 
             an application when a cache is stopped. You could include this 
             code in a code declaration block in the Web Forms page, or in a page code-behind file.
             <code>
             
            	public void OnCacheStopped(string cacheId)
            	{
            		// ...
            	}
            
            	protected void Application_Start(object sender, EventArgs e)
            	{
            		try
            		{
            			NCache.InitializeCache("myCache");
            			NCache.Cache.CacheStopped += new CacheStoppedCallback(this.OnCacheStopped);
            		}
            		catch(Exception e)
            		{
            		}
            	}
            	
             </code>
             </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache._refCount">
            <summary> Reference count of the cache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache._entry">
            <summary> </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache._serializationContext">
            <summary>Serialization context (actually name of the cache.)used for Compact Framework </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache._listener">
            <summary> Cache event listener object. Implements all events.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.NoAbsoluteExpiration">
            <summary>
            Used in the <paramref name="absoluteExpiration"/> parameter in an Insert method call to 
            indicate the item should never expire. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="absoluteExpiration"/> parameter equal 
            to <see cref="F:System.DateTime.MaxValue"/>, which is a constant representing the largest possible 
            <see cref="T:System.DateTime"/> value, 12/31/9999 11:59:59 PM.</remarks>
            <example>The following example demonstrates how to use the <see cref="F:Alachisoft.NCache.Web.Caching.InprocCache.NoAbsoluteExpiration"/> field to disable 
            absolute expirations when inserting an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            
            NCache.Cache.Insert("DSN", connectionString, null, Cache.NoAbsoluteExpiration, TimeSpan.FromSeconds(10));
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.NoSlidingExpiration">
            <summary>
            Used as the <paramref name="slidingExpiration"/> parameter in an Insert method call 
            to disable sliding expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="slidingExpiration"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. The cached item then expires 
            in accordance with the <paramref name="absoluteExpiration"/> parameter.</remarks>
            <example>The following example demonstrates how to use the Insert method to add an item to the 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object using the <see cref="F:Alachisoft.NCache.Web.Caching.InprocCache.NoSlidingExpiration"/> field.
            <code>
            
            NCache.Cache.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), Cache.NoSlidingExpiration);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.#ctor(Alachisoft.NCache.Caching.Cache,Alachisoft.NCache.Management.CacheConfig,Alachisoft.NCache.Web.Caching.Cache)">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
            <param name="objectCache"></param>
            <param name="config"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Finalize">
            <summary>
            Finalizer for this object.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.DisposeInternal(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
            <remarks>The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Dispose(System.Boolean)">
            <summary>
            Decerements the reference count of the cache and performs application-defined tasks 
            associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Lock(System.String,System.TimeSpan,Alachisoft.NCache.Web.Caching.LockHandle@)">
            <summary>
            Acquire a lock on an item in cache.
            </summary>
            <param name="key">key of cached item to be locked.</param>
            <param name="lockTimeout">TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="!:Lockhandle"/> that will be filled in with the lock information if lock is acquired successfully.</param>
            <returns>Whether or not lock was acquired successfully.</returns>
            <example>
            Following example demonstrates how to lock a cached item.
            <code>
            ...
            LockHandle lockHandle = new LockHandle();
            bool locked = theCache.lock("cachedItemKey", new TimeSpan(0,0,10), out lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Unlock(System.String)">
            <summary>
            Forcefully unlocks a locked cached item.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey");
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Unlock(System.String,System.Object)">
            <summary>
            Unlocks a locked cached item if the correct lock-id is specified.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Web.Caching.LockHandle"/> that was generated when lock was acquired.</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey", lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Clear(Alachisoft.NCache.Common.BitSet)">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            
            NCache.Cache.Clear();
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Clear();
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.</param>
            <returns><b>true</b> if the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            
            if(NCache.Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            if(Cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.ValidateKeyValue(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.MakeCompactEntry(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Create a CompactEntry object
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Add(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Add(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[])">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache.
             </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <returns>keys that are added or that alredy exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with an absolute 
             expiration 2 minutes from now, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"ORD_23", "ORD_67"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(new Order());
             items[0].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(new Order());
             items[1].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
            	NCache.Cache.Add(keys, items);
            
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Add(keys, items);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Get(System.String,Alachisoft.NCache.Common.BitSet,Alachisoft.NCache.Web.Caching.LockHandle@,System.TimeSpan,Alachisoft.NCache.Caching.LockAccessType)">
             <summary>
             Retrieves the specified item from the Cache object. If the object is read thru the data source,
            </summary>
             <param name="key">The identifier for the cache item to retrieve.</param>
             <returns>The retrieved cache item, or a null reference (Nothing 
             in Visual Basic) if the key is not found.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
             box server control.
             <code>
             
            	NCache.Cache.Get("MyTextBox.Value");
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Get("MyTextBox.Value");
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Get(System.String[],Alachisoft.NCache.Common.BitSet)">
            <summary>
            Retrieves the object from the cache for the given keys as key value pairs
            </summary>
            <param name="keys">The keys against which items are to be fetched.</param>
            <returns>The retrieved cache items.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
             box server control.
             <code>
             
            	NCache.Cache.Get(keys);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Get(keys);
             
             </code> 
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Insert(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,System.Int16,System.Int16,System.Collections.Hashtable,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Insert(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[])">
              <summary> Insert list of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache </summary>
             <param name="keys">The cache keys used to reference the items.</param>
             <param name="items">The items that are to be stored</param>
             <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="!:CacheItemRemovedCallback"/> 
            	delegate, see <see cref="!:CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.SlidingExpiration = TimeSpan.Zero;
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
            
            	NCache.Cache.Insert(keys, items);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Insert(keys, items);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Remove(System.String,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType)">
             <summary>
             Removes the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="key">The cache key used to reference the item.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Delete(System.String,Alachisoft.NCache.Common.BitSet,System.Object,Alachisoft.NCache.Caching.LockAccessType)">
             <summary>
             Removes the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="key">The cache key used to reference the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            
            NCache.Cache.Remove("timestamp");
            
            </code>
            Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
            <code>
            
            Cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.Remove(System.String[],Alachisoft.NCache.Common.BitSet)">
             <summary>
             Removes the objects from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <param name="flagMap"></param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
             is not found, returns a null reference (Nothing in Visual Basic).</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how you can remove an item from your application's 
             <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
             <code>
             
            	NCache.Cache.Remove(keys);
             
             </code>
             Or simply in a class deriving from <see cref="!:Alachisoft.NCache.Web.UI.NPage"/> or <see cref="!:Alachisoft.NCache.Web.UI.NUserControl"/>.
             <code>
             
            	Cache.Remove(keys);
             
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.InprocCache.Search(System.String,System.Collections.IDictionary)" -->
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.InprocCache.SearchEntries(System.String,System.Collections.IDictionary)" -->
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values 
            contained in the cache.
            </summary>
            <remarks>
            If items are added or removed from the cache while enumerating through the items
            the behavior is not predictable. It is therefore advised not to update the cache keys
            while enumerating.
            <para><b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Web.Caching.Cache.Count"/> in a cluster especially partitioned 
            this operation is an expensive one and may require network calls. It is therefore advised to use 
            this method only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.RegisterKeyNotificationCallback(System.String,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Registers the CacheItemUpdatedCallback and/or CacheItemRemovedCallback for the specified key.
            </summary>
            <remarks>
            <see cref="!:CacheItemUpdatedCallback"/> and/or <see cref="!:CacheItemRemovedCallback"/> provided
            this way are very useful because a client application can show interest in any item already present
            in the cache. As soon as the item is updated or removed from the cache, the client application is notified
            and actions can be taken accordingly.
            </remarks>
            <param name="key">The cache key used to reference the cache item.</param>
            <param name="updateCallback">The CacheItemUpdatedCallback that is invoked if the item
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">The CacheItemRemovedCallback is invoked when the item with
            the specified key is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.UnRegisterKeyNotificationCallback(System.String,System.Int16,System.Int16)">
            <summary>
            Unregisters the <see cref="!:CacheItemUpdatedCallback"/> and/or <see cref="!:CacheItemRemovedCallback"/> already registered
            for the specified key.
            </summary>
            <param name="key">The cache key used to reference the cache item.</param>
            <param name="updateCallback">CacheItemUpdatedCallback that is invoked when the item 
            with the specified key is updated in the cache.</param>
            <param name="removeCallback">CacheItemRemovedCallback that is invoked when the item
            with the key is removed from the cache.</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.InitializeCompactFramework">
            <summary>
            Initializes the Compact Serilization Framework.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.InprocCache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <remarks>This property can be useful when monitoring your application's performance 
            or when using ASP.NET tracing functionality.
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.InprocCache.Name">
            <summary>
            Gets the name of the cache.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.InprocCache.ClusterEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.ClusterEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.ClusterEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.ClusterEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.CacheAsyncEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.CacheAsyncEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.InprocCache.CacheEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.CacheEventsListener._listener">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.InprocCache.CacheEventsListener._nCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.CacheEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener,Alachisoft.NCache.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="nCache"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.InprocCache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheItemRemovedReason">
             <summary>
             Specifies the reason an item was removed from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
             <remarks>
             This enumeration works in concert with the <see cref="!:CacheItemRemovedCallback"/> delegate to 
             notify your applications when and why an object was removed from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.</remarks>
            <requirements>
             <constraint>This member is not available in SessionState edition.</constraint> 
             </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItemRemovedReason.Expired">
            <summary>
            The item is removed from the cache because it expired.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItemRemovedReason.Removed">
            <summary>
            The item is removed from the cache by a <see cref="M:Alachisoft.NCache.Web.Caching.Cache.Remove(System.String)"/> method call or by an 
            <see cref="M:Alachisoft.NCache.Web.Caching.Cache.Insert(System.String,System.Object)"/> method call that specified the same key.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItemRemovedReason.Underused">
            <summary>
            The item is removed from the cache because the system removed it to free memory.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.EventCacheItem">
            <summary>
            This is a stripped down version of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/>
            Contains basic information of an item present in the cache
            Will be provided in <see cref="!:QueryDataNotificationCallback"/> or <see cref="!:CacheItemRemovedCallback"/>
            but only when the event is registered against <see cref="!:EventDataFilter.Metadata"/> or <see cref="!:EventDataFilter.DataWithMetadata"/>
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.EventCacheItem._value">
            <summary> The actual object provided by the client application </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventCacheItem.Value">
            <summary>
            Will contain the value present in the cache but only if the event was registered against
            <see cref="!:EventDataFilter.Metadata"/> or <see cref="!:EventDataFilter.DataWithMetadata"/>
            otherwise it will be null
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventCacheItem.CacheItemPriority">
            <summary>
            CacheItemPriority of the item present in the cache
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.Cache">
            <summary>
            Implements the clustered cache for an application
            </summary>
            <remarks>
            One instance of this class is created per application domain, and it remains 
            valid as long as the application domain remains active. This object is accessible through the 
            <see cref="!:NCache.Cache"/> property of the <see cref="T:Alachisoft.NCache.Web.Caching.NCache"/> object.
            </remarks>
            <example>
            To create an instance of Cache class you can use code as follows:
            <code>
            Cache cache = NCache.InitializeCache("myReplicatedCache");
            Application[�CacheHandle�] = cache;
            </code>
            </example>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>    
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._cacheImpl">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._refCount">
            <summary> Reference count of the cache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._serializationContext">
            <summary>Serialization context (actually name of the cache.)used for Compact Framework </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._callbackIDsMap">
            <summary> Contains callback ids and associated callbacks</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._callbacksMap">
            <summary> Contains callbacks and associated callback ids. Actually reverse of the above pool.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._rcbInitialVal">
            <summary> Initial values for CustomRemovedCallback and CustomUpdateCallback ids. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache._clusterListener">
            <summary> Cache event listener object. Implements all events.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.NoAbsoluteExpiration">
            <summary>
            Used in the <paramref name="absoluteExpiration"/> parameter in an Insert method call to 
            indicate the item should never expire. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="absoluteExpiration"/> parameter equal 
            to <see cref="F:System.DateTime.MaxValue"/>, which is a constant representing the largest possible 
            <see cref="T:System.DateTime"/> value, 12/31/9999 11:59:59 PM.</remarks>
            <example>The following example demonstrates how to use the <see cref="F:Alachisoft.NCache.Web.Caching.Cache.NoAbsoluteExpiration"/> field to disable 
            absolute expirations when inserting an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Insert("DSN", connectionString, null, Cache.NoAbsoluteExpiration, TimeSpan.FromSeconds(10));
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.NoSlidingExpiration">
            <summary>
            Used as the <paramref name="slidingExpiration"/> parameter in an Insert method call 
            to disable sliding expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="slidingExpiration"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. The cached item then expires 
            in accordance with the <paramref name="absoluteExpiration"/> parameter.</remarks>
            <example>The following example demonstrates how to use the Insert method to add an item to the 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object using the <see cref="F:Alachisoft.NCache.Web.Caching.Cache.NoSlidingExpiration"/> field.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), Cache.NoSlidingExpiration);
            
            </code>
            </example>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.NoLockExpiration">
            <summary>
            Used as the <paramref name="lockTimeout"/> parameter in Lock method call 
            to disable locking expirations. This field is read-only.
            </summary>
            <remarks>When used, this field sets the <paramref name="lockTimeout"/> parameter equal to the <see cref="F:System.TimeSpan.Zero"/>
            field, which has a constant value of zero. Then the cache item remains locked untill explicitly released.</remarks>
            <example>The following example demonstrates how to use the Lock method to add an item to the 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object using the <see cref="F:Alachisoft.NCache.Web.Caching.Cache.NoLockExpiration"/> field.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            LockHandle lockHandle = new LockHandle();
            cache.Lock("DSN", Cache.NoLockExpiration, out lockHandle);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.#ctor">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.#ctor(Alachisoft.NCache.Web.Caching.CacheImplBase,Alachisoft.NCache.Management.CacheConfig)">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
            <param name="objectCache"></param>
            <param name="config"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.#ctor(Alachisoft.NCache.Web.Caching.CacheImplBase,System.String,Alachisoft.NCache.Web.Statistics.PerfStatsCollector2)">
            <summary>
            Initializes a new instance of the Cache class.
            </summary>
            <param name="objectCache"></param>
            <param name="cacheId"></param>        
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Finalize">
            <summary>
            Finalizer for this object.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <param name="disposing"></param>
            <remarks>The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Dispose">
            <summary>
            Decerements the reference count of the cache and performs application-defined tasks 
            associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            The behavior of this method depends upon the cache's sharing mode (inproc/outproc) 
            specified in the configuration.
            <para>If the application uses the cache in <b>inproc</b> mode, calling Dispose closes the cache 
            and releases the resources used by it. If in a cluster the calling node leaves the 
            cluster as well. 
            </para>
            <para>If the application uses the cache in <b>outproc</b> mode, calling Dispose releases the 
            reference to the cache object. The cache itself remains operational and cluster remains intact. 
            </para>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Clear">
            <summary>
            Removes all elements from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Clear();
            
            </code>        
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Contains(System.String)">
            <summary>
            Determines whether the cache contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.</param>
            <returns><b>true</b> if the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> contains an element 
            with the specified key; otherwise, <b>false</b>.</returns>
            <remarks>In most of the cases this method's implementation is close to O(1).
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <example>The following example demonstrates how to check for containment of an item in the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            if(cache.Contains("MyTextBox.Value"))
            {
            	Response.Write("Item found!");
            }
            
            </code>        
            </example>
            
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.ValidateKeyValue(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.SetAttributes(System.String,Alachisoft.NCache.Runtime.Caching.CacheItemAttributes)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="attributes"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Add(System.String,System.Object)">
            <summary>
            Adds an item into the Cache object with a cache key to reference its location 
            and using default values provided by the CacheItemPriority enumeration.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <returns>An instance of <see cref="!:CacheItemVersion"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> or <paramref name="value"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If the <paramref name="key"/> or <paramref name="value"/> parameter is null,
            an <see cref="T:System.ArgumentNullException"/> is thrown.</para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to add an item into an application's cache.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Add("DSN", connectionString);
            
            </code>        
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.Cache.Add(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority)" -->
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Add(System.String,Alachisoft.NCache.Web.Caching.CacheItem)">
             <summary>
             Add a <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache
             </summary>
             <param name="key">The cache key used to reference the item.</param>
             <param name="item">The item that is to be stored</param>
             <returns>An instance of <see cref="!:CacheItemVersion"/></returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to add an item to the cache with an absolute 
             expiration of 2 minutes from now, a priority of high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItem.
             <code>
             object someData = new object();
             CacheItem item = new CacheItem(someData);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
             Cache cache = NCache.InitializeCache("myCache");
            	cache.Add("someData", item);
            
             </code>        
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.AddBulk(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[])">
             <summary>
             Add array of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache.
             </summary>
            <param name="keys">The cache keys used to reference the items.</param>
            <param name="items">The items that are to be stored</param>
            <returns>keys that are added or that alredy exists in the cache and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add items to the cache with an absolute 
             expiration 2 minutes from now, a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItems.
             <code>
             string keys = {"First", "Second"};
             CacheItem items = new CacheItem[2]
             items[0] = new CacheItem(firstTimeStamp);
             items[0].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[0].Priority = CacheItemPriority.High;
             items[0].ItemRemoveCallback = onRemove;
            
             items[1] = new CacheItem(secondTimeStamp);
             items[1].AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             items[1].Priority = CacheItemPriority.Low;
             items[1].ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             
             Cache cache = NCache.InitializeCache("myCache");
            	cache.Add(keys, items);
            
             </code>        
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.AddOperation(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64@,System.Boolean)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.ToUTC(System.DateTime)">
             <summary>
             Converts provided DateTime to UTC; All clients and server will talk in UTC to avoid geographically seperated servers and clients
             
             <para>MSDN Note: On Windows XP systems, the ToLocalTime method recognizes only the current adjustment rule when converting from UTC to local time.
            As a result, conversions for periods before the current adjustment rule came into effect may not accurately reflect the difference between UTC and local time.
            Link: http://stackoverflow.com/questions/4960303/datetime-tolocaltime-on-windows-xp </para>
             </summary>
             <param name="date">DateTime to change to UTC</param>
             <returns>UTC timeone DateTime</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alachisoft.NCache.Web.Caching.Cache.AddBulkOperation(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[]@,System.Boolean)" -->
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Get(System.String)">
            <summary>
            Retrieves the specified item from the Cache object.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Get("MyTextBox.Value");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Get(System.String,System.TimeSpan,Alachisoft.NCache.Web.Caching.LockHandle@,System.Boolean)">
             <summary>
             Retrieves the specified item from the Cache object if it is not already locked. Otherwise returns null (Nothing in Visual Basic).
             This is different from the normal Get operation where an item is returned ignoring the lock
             altogether.
             </summary>
             <param name="key">The identifier for the cache item to retrieve.</param>
             <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
             <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Web.Caching.LockHandle"/> to hold the lock information.</param>
             <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
             <returns>The retrieved cache item, or a null reference (Nothing 
             in Visual Basic) if the key is not found.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="key"/> is is an empty string.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how to retrieve the cached value and acquire a lock at the same time.
             <code>
             
             Cache theCache = NCache.InitializeCache("myreplicatedcache");
             theCache.Add("cachedItemKey", new CacheItem("cachedItemValue"));
            
             LockHandle lockHandle = new LockHandle();
              
             object cachedItem = theCache.Get("cachedItemKey", Cache.NoLockingExpiration, ref lockHandle, true);
             
             </code>
             </example>   
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.GetBulk(System.String[])">
             <summary>
             Retrieves the object from the cache for the given keys as key value pairs
             </summary>
            <param name="keys">The keys against which items are to be fetched.</param>
            <returns>The retrieved cache items.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
             <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
             <remarks>
             <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
             setting, this property throws exception incase of failure.</para>
             </remarks>
             <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
             box server control.
             <code>
             Cache cache = NCache.InitializeCache("myCache");
             string[] keys = new string[]{"myItem1", "myItem2"};
            	IDictionary items = cache.Get(keys);
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.GetCacheItem(System.String)">
            <summary>
            Get the cache item stored in cache.
            </summary>
            <param name="key">Key used to reference the desired object</param>        
            <returns>CacheItem</returns>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            CacheItem item = cache.GetCacheItem(key);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.GetCacheItem(System.String,System.TimeSpan,Alachisoft.NCache.Web.Caching.LockHandle@,System.Boolean)">
            <summary>
            Get the cache item stored in cache.
            </summary>
            <param name="key">Key used to reference the desired object</param>
            <param name="lockTimeout">The TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Web.Caching.LockHandle"/> to hold the lock information.</param>
            <param name="acquireLock">A flag to determine whether to acquire a lock or not.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.
            </returns>
            <remarks>
            /// <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            LockHandle lockHandle = new LockHandle();
            CacheItem item = cache.GetCacheItem("cachedItemKey",TimeSpan.FromSeconds(30) , ref lockHandle, true);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Insert(System.String,System.Object)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location 
            and using default values provided by the CacheItemPriority enumeration.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> or <paramref name="value"/> is not serializable.</exception>
            <remarks>
            This method will overwrite an existing <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> item with the same <paramref name="key"/> parameter.
            <para><b>Note:</b> If the <paramref name="key"/> or <paramref name="value"/> parameter is null,
            an <see cref="T:System.ArgumentNullException"/> is thrown.</para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to insert an item into an application's cache.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Insert("DSN", connectionString);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Insert(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority)">
            <summary>
            Inserts an object into the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> with dependencies, expiration and 
            priority policies.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="value">The item to be added to the cache.</param>
            <param name="absoluteExpiration">The time at which the added object expires 
            and is removed from the cache.</param>
            <param name="slidingExpiration">The interval between the time the added object was last 
            accessed and when that object expires. If this value is the equivalent of 
            20 minutes, the object expires and is removed from the cache 20 minutes 
            after it is last accessed. </param>
            <param name="priority">The relative cost of the object, as expressed by 
            the <see cref="T:Alachisoft.NCache.Runtime.CacheItemPriority"/> enumeration. The cache uses this value when it 
            evicts objects; objects with a lower cost are removed from the cache 
            before objects with a higher cost.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> or <paramref name="value"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> or <paramref name="value"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If the <paramref name="key"/> or <paramref name="value"/> parameter is null, 
            an <see cref="T:System.ArgumentNullException"/> is thrown. If you set the <paramref name="slidingExpiration"/> 
            parameter to less than <see cref="F:System.TimeSpan.Zero"/>, or the equivalent of 
            more than one year, an <see cref="T:System.ArgumentOutOfRangeException"/> is thrown. You cannot set 
            both sliding and absolute expirations on the same cached item. If you do so, an 
            <see cref="T:System.ArgumentException"/> is thrown.</para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to assign an item high priority when you insert 
            it into your application's <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Insert("DSN", connectionString, null, DateTime.Now.AddMinutes(2), TimeSpan.Zero, CacheItemPriority.High);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Insert(System.String,Alachisoft.NCache.Web.Caching.CacheItem)">
             <summary>
             Add a <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache
             </summary>
             <param name="key">The cache key used to reference the item.</param>
             <param name="item">The item that is to be stored</param>
             <returns>An instance of <see cref="!:CacheItemVersion"/></returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>		
             <example>The following example demonstrates how to add an item to the cache with a sliding expiration of 5 minutes and a priority of 
             high, and that notifies the application when the item is removed from the cache.
             
             First create a CacheItem.
             <code>
             CacheItem item = new CacheItem(timeStamp);
             item.SlidingExpiration = new TimeSpan(0,5,0);
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then add CacheItem to the cache
             <code>
             Cache cache = NCache.InitializeCache("myCache");
            	cache.Insert("timestamp", item);
            
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Insert(System.String,Alachisoft.NCache.Web.Caching.CacheItem,Alachisoft.NCache.Web.Caching.LockHandle,System.Boolean)">
            <summary>
            Inserts a <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache if not already existing.
            Otherwise updates an existing item if it not already locked or if the correct lock-id is specified.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The item that is to be stored</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Web.Caching.LockHandle"/>. If the item is locked, then it can be updated only if the correct lockHandle is specified.</param>
            <param name="releaseLock">A flag to determine whether or not release lock after operation is performed.</param>
            <returns>The object item added to the Cache.</returns>
            <remarks>If lockId does not match with the lockId associated with cached item,
            an exception will be thrown.</remarks>		
            <example>The following example demonstrates how to update a locked item in the cache.
            
            First create a CacheItem.
            <code>
            Cache theCache = NCache.InitializeCache("myreplicatedcache");
            </code>
            Add an item int the cache.
            <code>
            theCache.Add("cachedItemKey", new CacheItem("cachedItemValue"));
            </code>
            Create the objects for lockid and lockdate.
            <code>
            LockHandle lockHandle = new LockHandle();
            </code>    
            Get the added item from cache and acquire a lock.
            <code>
            object cachedItem = theCache.Get("cachedItemKey", Cache.NoLockingExpiration, ref lockHandle, true);
            if (cachedItem != null)
            {
                try
                {
                    theCache.Insert("cachedItemKey", new CacheItem("someothervalue"), lockHandle, true);
                    string cachedValue = (string)theCache.Get("cachedItemKey");
                }
                catch (OperationFailedException ex)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.InsertBulk(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[])">
             <summary> Insert list of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache </summary>
            <param name="keys">The cache keys used to reference the items.</param>
            <param name="items">The items that are to be stored</param>
            <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="!:CacheItemRemovedCallback"/> 
            	delegate, see <see cref="!:CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
             Cache cache = NCache.InitializeCache("myCache");
             string[] keys = new string[]{"myItem1", "myItem2"};
             CacheItem[] items = new CacheItem[]{myItem1, myItem2};
             
             </code>
             </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.InsertBulkOperation(System.String[],Alachisoft.NCache.Web.Caching.CacheItem[],System.Int64[]@,System.Boolean)">
             <summary> Insert list of <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> to the cache </summary>
            <param name="keys">The cache keys used to reference the items.</param>
            <param name="items">The items that are to be stored</param>
            <param name="sizes"></param>
            <param name="allowQueryTags"></param>
            <returns>returns keys that are added or updated successfully and their status.</returns>
             <remarks> If CacheItem contains invalid values the related exception is thrown. 
             See <see cref="T:Alachisoft.NCache.Web.Caching.CacheItem"/> for invalid property values and related exceptions</remarks>
             <example>The following example demonstrates how to assign an item high priority when you insert 
             it into your application's <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            	<para><b>Note: </b>For more information about how to use this method with the <see cref="!:CacheItemRemovedCallback"/> 
            	delegate, see <see cref="!:CacheItemRemovedCallback"/>.
            	</para>
             First create CacheItems.
             <code>
             string[] keys = {"SQLDSN", "ORADSN"};
             CacheItem items[] = new CacheItem[2];
             items[0] = new CacheItem(sqlConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
             item.Priority = CacheItemPriority.High;
             item.ItemRemoveCallback = onRemove;
             
             items[1] = new CacheItem(oraConnectionString);
             item.AbsoluteExpiration = DateTime.Now.AddMinutes(1);
             item.Priority = CacheItemPriority.Low;
             item.ItemRemoveCallback = onRemove;
             </code>
             
             Then insert CacheItems to the cache
             <code>
             Cache cache = NCache.InitializeCache("myCache");
             string[] keys = new string[] { "myItem1", "myItem2" };
             CacheItem[] items = new CacheItem[]{myItem1, myItem2};
            	cache.Insert(keys, items, "Connection", null);
             
             </code>
             </example>        
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.InsertOperation(System.String,System.Object,System.DateTime,System.TimeSpan,Alachisoft.NCache.Runtime.CacheItemPriority,Alachisoft.NCache.Web.Caching.LockHandle,Alachisoft.NCache.Caching.LockAccessType,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventDataFilter,Alachisoft.NCache.Runtime.Events.EventDataFilter,System.Int64@,System.Boolean)">
            <summary>
            Function that choose the appropriate function of NCache's Cache, that need to be called
            according to the data provided to it.</summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.RegisterCacheNotification(Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registers ItemAdded, ItemUpdate or ItemRemoved events with cache
            </summary>
            <remarks>
            Client application can show interest in receiving events if an item is added, update or removed from the cache.
            As soon as the item is added, updated or removed from the cache, the client application is notified
            and actions can be taken accordingly.
            </remarks>
            <param name="cacheDataNotificationCallback">the CacheDataNotificationCallback that is invoked when an item is added, updated or removed from the cache.</param>
            <param name="eventType">Tells whether the event is to be raised on Item Added, Updated or Removed</param>
            <param name="datafilter">Tells whether to receive metadata, data with metadata or none when a notification is triggered</param>
            <example>
            First create an ItemCallback
            <code>
            ItemCallback(string key, CacheEventArg e)
            {
               ...
            }
            </code>
            Then register the Cache Notification
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            CacheEventDescriptor descriptor=cache.RegisterCacheNotification(new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded, EventDataFilter.None);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.RegisterCacheNotification(System.String,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registers the ItemUpdate or ItemRemoved events for the specified key.
            </summary>
            <param name="key">The cache key used to reference the cache item.</param>
            <param name="selectiveCacheDataNotificationCallback">The CacheDataNotificationCallback that is invoked when an item is added, updated or removed from the cache.</param>
            <param name="eventType">Tells whether the event is to be raised on Item Added, Updated or Removed</param>
            <param name="datafilter">Tells whether to receive metadata, data with metadata or none when a notification is triggered</param>
            <example>
            First create an ItemCallback
            <code>
            ItemCallback(string key, CacheEventArg e)
            {
               ...
            }
            </code>
            Then register the Key Notification
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.RegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemUpdated, EventDataFilter.None);
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.UnRegisterCacheNotification(System.String,Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Unregisters event that may have been registered against a specific key
            </summary>
            <param name="key">The cache key used to reference the cache item</param>
            <param name="callback">The CacheDataNotificationCallback that was specified while registering the event.</param>
            <param name="eventType">Type of the event to unregister</param>
            <example>
            Let us consider you registered an event against a key
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.RegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded, EventDataFilter.None);
            </code>
            Now, Unregister this event by providing the key, callback and eventtype
            <code>
            cache.UnRegisterCacheNotification(key, new CacheDataNotificationCallback(ItemCallback), EventType.ItemAdded);
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Unlock(System.String)">
            <summary>
            Forcefully unlocks a locked cached item.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey");
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Unlock(System.String,Alachisoft.NCache.Web.Caching.LockHandle)">
            <summary>
            Unlocks a locked cached item if the correct lock-id is specified.
            </summary>
            <param name="key">key of a cached item to be unlocked</param>
            <param name="lockHandle">An instance of <see cref="T:Alachisoft.NCache.Web.Caching.LockHandle"/> that was generated when lock was acquired.</param>
            <example>
            Following example demonstrates how to unlock a cached item.
            <code>
            ...
            theCache.Unlock("cachedItemKey", lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Lock(System.String,System.TimeSpan,Alachisoft.NCache.Web.Caching.LockHandle@)">
            <summary>
            Acquire a lock on an item in cache.
            </summary>
            <param name="key">key of cached item to be locked.</param>
            <param name="lockTimeout">TimeSpan after which the lock is automatically released.</param>
            <param name="lockHandle">An instance of <see cref="!:Lockhandle"/> that will be filled in with the lock information if lock is acquired successfully.</param>
            <returns>Whether or not lock was acquired successfully.</returns>
            <example>
            Following example demonstrates how to lock a cached item.
            <code>
            ...
            LockHandle lockHandle = new LockHandle();
            bool locked = theCache.lock("cachedItemKey", new TimeSpan(0,0,10), out lockHandle);
            ...
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.IsLocked(System.String,Alachisoft.NCache.Web.Caching.LockHandle@)">
            <summary>
            Determines if item in cache is locked.
            </summary>
            <param name="key">key of item to check for lock</param>
            <param name="lockHandle">lockHandle will be set if item is locked</param>
            <returns>true if the item is locked, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Remove(System.String)">
            <summary>
            Removes the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Remove("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Delete(System.String)">
            <summary>
            Delete the object from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <param name="key">The cache key used to reference the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Delete("timestamp");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Remove(System.String,Alachisoft.NCache.Web.Caching.LockHandle)">
            <summary>
            Removes an item from cache if it is not already locked or if the correct lock-id is specified.
            </summary>
            <param name="key">key of item to be removed</param>
            <param name="lockHandle">If the item is locked then, it can be removed only if the correct lockHandle is specified.</param>
            <returns>The item removed from the Cache. If the value in the key parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <example>The following example demonstrates how to remove a locked item from the cache.
            
            First create a CacheItem.
            <code>
            Cache theCache = NCache.InitializeCache("myreplicatedcache");
            </code>
            Add an item int the cache.
            <code>
            theCache.Add("cachedItemKey", "cachedItemValue");
            </code>
            Create the lock-handle.
            <code>
            LockHandle lockHandle = new LockHandle();
            </code>    
            Get the added item from cache and acquire a lock.
            <code>
            object cachedItem = theCache.Get("cachedItemKey", ref lockHandle, true);
            if (cachedItem != null)
            {
                try
                {
                    //Now remove the cached item using lockHandle acquired earlier.
                    object removedItem = theCache.Remove("cachedItemKey", lockHandle);
                }
                catch (OperationFailedException ex)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Delete(System.String,Alachisoft.NCache.Web.Caching.LockHandle)">
            <summary>
            Removes an item from cache if it is not already locked or if the correct lock-id is specified.
            </summary>
            <param name="key">key of item to be removed</param>
            <param name="lockHandle">If the item is locked then, it can be removed only if the correct lockHandle is specified.</param>
            <example>The following example demonstrates how to remove a locked item from the cache.
            
            First create a CacheItem.
            <code>
            Cache theCache = NCache.InitializeCache("myreplicatedcache");
            </code>
            Add an item int the cache.
            <code>
            theCache.Add("cachedItemKey", "cachedItemValue");
            </code>
            Create the lock-handle.
            <code>
            LockHandle lockHandle = new LockHandle();
            </code>    
            Get the added item from cache and acquire a lock.
            <code>
            object cachedItem = theCache.Get("cachedItemKey", ref lockHandle, true);
            if (cachedItem != null)
            {
                try
                {
                    //Now remove the cached item using lockHandle acquired earlier.
                    object removedItem = theCache.Remove("cachedItemKey", lockHandle);
                }
                catch (OperationFailedException ex)
                {
                    //Do something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.RemoveBulk(System.String[])">
            <summary>
            Removes the objects from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <returns>The items removed from the Cache. If the value in the keys parameter 
            is not found, returns a null reference (Nothing in Visual Basic).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            string[] keys = new string[]{"myItem1", "myItem2"};
            cache.Remove(keys);
            
            </code>
            </example>
            
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.DeleteBulk(System.String[])">
             <summary>
             Removes the objects from the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
             </summary>
            <param name="keys">The cache keys used to reference the item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how you can remove an item from your application's 
            <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            string[] keys = new string[]{"myItem1", "myItem2"};
            cache.DeleteBulk(keys);
            
            </code>
            </example>
            
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.Search(System.String,System.Collections.IDictionary)">
            <summary>
            Performs search on the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> based on the query specified.
            </summary>
            <param name="query">simple SQL like query syntax to query objects from cache</param>
            <param name="values">The IDictionary of atribute names and values.</param>
            <returns>Returns a list of cache keys</returns>
            <example>
            These operators are supported by NCache Queries.
            1. Comparison Operators = , == , != , &lt;&gt; , &lt; , &gt; , &lt;=, &gt;=, IN 
            2. Logical Operators AND , OR , NOT 
            3. Miscellaneous () , DateTime.Now , DateTime("any date time compatible string")
            
            <code>
            
            Hashtable values = new Hashtable();
            values.add("Name", "Paul Jones");
            "select Test.Application.Employee where this.Name = ?"
            
            values.add("Salary", 2000);
            "select Test.Application.Employee where this.Salary &gt; ?"
            
            values.Add("Name", "Paul jones");
            values.Add("Salary", 2000);
            "select Test.Application.Employee where this.Name = ? and this.Salary &gt; ?"
            
            values.Add("Name", "Paul Jones");
            values.Add("Salary", 2000);
            "select Test.Application.Employee where Not(this.Name = 'Paul Jones' and this.Salary &gt; 2000)"
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate
            through the key settings and their values 
            contained in the cache.
            </summary>
            <remarks>
            If items are added or removed from the cache while enumerating through the items
            the behavior is not predictable. It is therefore advised not to update the cache keys
            while enumerating.
            <para><b>Note:</b> Just like <see cref="P:Alachisoft.NCache.Web.Caching.Cache.Count"/> in a cluster especially partitioned 
            this operation is an expensive one and may require network calls. It is therefore advised to use 
            this method only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <returns>An enumerator to iterate through the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object.</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.InitializeCompactFramework">
            <summary>
            Initializes the Compact Serilization Framework.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.ToString">
            <summary>
            The string representation of the cache object. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.IsNullOrDupliate(System.String[])">
            <summary>
            Finds duplicate in the 'key' array.
            </summary>
            <param name="keys">The keys against which items are to be fetched.</param>        
            <returns>True if duplicate exists else false.</returns>       
            <exception cref="T:System.ArgumentException"><paramref name="keys"/> Thrown if duplicate is found.</exception>        
            <exception cref="T:System.ArgumentNullException"><paramref name="keys"/> Thrown if Key is Null.</exception> 
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.LogSizeInfo(System.Boolean,System.Int64,System.Int32)">
            <summary>
            Adds Size info to hashtable for logging
            </summary>
            <param name="isBulk"></param>
            <param name="objectSize">Size of Object after serialization. Incase of Bulk, it will be the sum of size of objects.</param>
            <param name="noOfObjects"></param>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.Cache.CacheId">
            <summary>
            Get cache id.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled">
            <summary>
            Flag that indicates whether exceptions are enabled or not.
            </summary>
            <remarks>
            If this property is set the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object
            throws exceptions from public operations. If not set no exception is thrown and the
            operation fails silently. Setting this flag is especially helpful during 
            development phase of application since exceptions provide more information about
            the specific causes of failure. 
            </remarks>
            <value>true if exceptions are enabled, otherwise false.</value>
            <example> This sample shows how to set the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> property.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.ExceptionsEnabled = true;
                 
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.Cache.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
            <remarks>This property can be useful when monitoring your application's performance 
            or when using ASP.NET tracing functionality.
            <para><b>Note:</b> In a partitioned cluster this operation is an expensive one as it might 
            result in network calls. It is therefore advised to use this property only when required.
            </para>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.Cache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <value>The number of items stored in the cache.</value>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.CacheAsyncEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.CacheAsyncEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.CacheAsyncEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.ClusterEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener">
            <summary>
            Providers hanlders for <see cref="T:Alachisoft.NCache.Caching.Cache"/> events. This is an 
            internal class and must not be used from outside
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener._parent">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener.#ctor(Alachisoft.NCache.Web.Caching.Cache,Alachisoft.NCache.Web.Caching.EventManager)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Cache.CacheEventsListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.WrapperCache.Get(System.String)">
            <summary>
            Retrieves the specified item from the Cache object.
            </summary>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or a null reference (Nothing 
            in Visual Basic) if the key is not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> contains a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not serializable.</exception>
            <remarks>
            <para><b>Note:</b> If exceptions are enabled through the <see cref="P:Alachisoft.NCache.Web.Caching.WrapperCache.ExceptionsEnabled"/> 
            setting, this property throws exception incase of failure.</para>
            </remarks>
            <example>The following example demonstrates how to retrieve the value cached for an ASP.NET text 
            box server control.
            <code>
            Cache cache = NCache.InitializeCache("myCache");
            cache.Get("MyTextBox.Value");
            
            </code>
            </example>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.Reset">
            <summary>
            Set the enumerator to its initial position. which is before the first element in the collection
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next element of the collection 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.Current">
            <summary>
            Gets the current element in the collection
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.Entry">
            <summary>
            Gets the key and value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.WebCacheEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Net.NodeInfo">
            <summary>
            Holds the information about the cluster member nodes. It identifies 
            each member of the cluster uniquely with a combination of the Ip Address
            and port.
            An instance of this class can not be instantiated. When client applications
            register the events <see cref="!:Alachisoft.NCache.Web.Caching.MemberJoinedCallback"/>
            or <see cref="!:Alachisoft.NCache.Web.Caching.MemberLeftCallback"/>, an instance of 
            NodeInfo is passed in the notification.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Net.NodeInfo.ToString">
            <summary>
            provides the string representation of NodeInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Net.NodeInfo.appendShortName(System.String,System.Text.StringBuilder)">
            <summary> Input: "daddy.nms.fnc.fujitsu.com", output: "daddy". Appends result to string buffer 'sb'.</summary>
            <param name="hostname">The hostname in long form. Guaranteed not to be null
            </param>
            <param name="sb">The string buffer to which the result is to be appended
            </param>
        </member>
        <member name="P:Alachisoft.NCache.Web.Net.NodeInfo.IpAddress">
            <summary>
            IPAddress of the node joining / leaving the cluster.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Net.NodeInfo.Port">
            <summary>
            Port, the member uses for the cluster-wide communication.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.EventManager">
            <summary>
            Has the responsibility of creating <see cref="T:Alachisoft.NCache.Web.Caching.CacheEventDescriptor"/> and registering it agains a ResourcePool
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.EventManager.RegisterSelectiveEvent(Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            Registeres the callback sepeartely and returns short values of registeredCallbacks
            </summary>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="eventType"></param>
            <param name="datafilter"></param>
            <returns>short array,<para>1st element is updated callbackRef</para><para>2st element is removed callbackRef</para></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.EventManager.RaiseSelectiveCacheNotification(System.String,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Web.Caching.EventCacheItem,Alachisoft.NCache.Web.Caching.EventCacheItem,Alachisoft.NCache.Web.Caching.CacheItemRemovedReason,System.Boolean,Alachisoft.NCache.Web.Caching.EventHandle,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            TheadSafe and no locks internally
            </summary>
            <param name="key"></param>
            <param name="eventType">Should contain one type i.e. should not be used as a flag.
            Every EventType should be executed from another thread</param>
            <param name="item"></param>
            <param name="oldItem"></param>
            <param name="reason"></param>
            <param name="_notifyAsync"></param>
            <param name="eventhandle"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.EventManager.RegisterSelectiveDiscriptor(Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Returning Negative value means operation not successfull
            </summary>
            <param name="discriptor"></param>
            <param name="eventType"></param>
            <returns>short array <para>1st value is Update callbackRef</para> <para>nd value is removeRef</para></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.EventManager.UnregisterSelectiveNotification(Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType)">
            <summary>
            Unregisters CacheDataNotificationCallback
            <para>Flag based unregistration</para>
            </summary>
            <param name="callback"></param>
            <param name="key"></param>
            <param name="eventType"></param>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions._loggingExpired">
            <summary>
            Indicates that all logging intervals has been passed.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.loadConfiguration">
            <summary>
            Loads configurations from application configuration (app.config/web.config)
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.IsInLoggingInterval">
            <summary>
            Checks whether current time instant is in logging interval
            </summary>
            <returns>true if current time instant is in logging interval, else false</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.GetIterationNumber(System.DateTime)">
            <summary>
            Gets logging iteration number for specified time
            </summary>
            <param name="loggingTime">Time insant for which logging iteration number is needed</param>
            <returns>Logging iteraion number</returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.TimeBeforeLoggingStart">
            <summary>
            Gets ime in seconds after cache start, after which logging should be started
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.NumberOfIterations">
            <summary>
            Gets number of logging iteraions
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.DurationOfEachIteration">
            <summary>
            Gets duration of each logging iteration in seconds
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.IntervalBetweenIterations">
            <summary>
            Gets time interval in seconds between two consecutive logging iterations
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.LoggingEnabled">
            <summary>
            Gets if logging is enabled or not
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.DebugAPIConfiguraions.LoggerThreadLoggingInterval">
            <summary>
            Gets time interval in seconds after which logger thread should write logs to file
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.DirectoryUtil.GetFileLocalPath(System.String)">
            <summary>
            search for the specified file in the executing assembly's working folder
            if the file is found, then a path string is returned back. otherwise it returns null.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.DirectoryUtil.GetFileGlobalPath(System.String,System.String)">
            <summary>
            search for the specified file in NCache install directory. if the file is found
            then returns the path string from where the file can be loaded. otherwise it returns 
            null.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.APILogging.APILogItem._abs">
            <summary> Absolute expiration for the object. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.APILogging.APILogItem._sld">
            <summary> Sliding expiration for the object. </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.Signature">
            <summary>
            Get or set the sinature of API call
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.Key">
            <summary>
            Get or set the key
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.NoOfKeys">
            <summary>
            Get or set the number of keys
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.AbsolueExpiration">
            <summary>
            Get or set the absolute expiraion date and time
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.SlidingExpiration">
            <summary>
            Get or set the sliding expiration timespan
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.APILogging.APILogItem.Priority">
            <summary>
            Get or set the priority
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheMode">
            <summary>
            Specifies the startup mode (also known as isolation level) of <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>.
            </summary>
            <remarks>
            This enumeration allows you to control the the startup mode of <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> programmatically. The startup 
            mode <see cref="F:Alachisoft.NCache.Web.Caching.CacheMode.OutProc"/> corresponds to a High isolation level implying that 
            the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> runs in NCache service's process. 
            Similarly <see cref="F:Alachisoft.NCache.Web.Caching.CacheMode.InProc"/> implies that <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> is inproc to the applications. 
            <see cref="F:Alachisoft.NCache.Web.Caching.CacheMode.InProc"/> is equal to specfying no mode at all, and in that case the mode
            specified in cache configuration is used.
            <para>
            An isolated cache can be shared between applications on the same node. Morever an isolated cache's lifetime 
            is explicitly controlled by using NCache Manager application.
            </para>
            </remarks>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheMode.Default">
            <summary>
            Use the startup mode specified in the configuration.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheMode.InProc">
            <summary>
            Start the cache inproc, i.e., with a low isolation level.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheMode.OutProc">
            <summary>
            Start the cache outproc, i.e., with a high isolation level.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.WebCacheHelper">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.WebCacheHelper.GetWebItemRemovedReason(Alachisoft.NCache.Caching.ItemRemoveReason)">
            <summary>
            Converts between NCache item remove reason and web item remove reason.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.WebCacheHelper.MakeFixedIdleExpirationHint(System.DateTime,System.TimeSpan)">
            <summary>
            combines the absolute and sliding expiry params and returns a single
            expiration hint value.
            </summary>
            <param name="absoluteExpiration">the absolute expiration datatime</param>
            <param name="slidingExpiration">the sliding expiration time</param>
            <returns>expiration hint</returns>
            <remarks>If you set the <paramref name="slidingExpiration"/> parameter to less than TimeSpan.Zero, 
            or the equivalent of more than one year, an <see cref="T:System.ArgumentOutOfRangeException"/> is thrown. 
            You cannot set both sliding and absolute expirations on the same cached item. 
            If you do so, an <see cref="T:System.ArgumentException"/> is thrown.</remarks>
        </member>
        <member name="T:Alachisoft.NCache.Web.Statistics.PerfStatsCollector">
            <summary>
            Summary description for PerfStatsCollector.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.PC_CATEGORY">
            <summary> Category name of counter performance data.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._instanceName">
            <summary> Instance name. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._port">
            <summary> Port number. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._pcClientRequestsPerSec">
            <summary> performance counter for cache requests per second by the client. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._pcClientResponsesPerSec">
            <summary> performance counter for cache responses per second by the client. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._pcTotalClientRequestsPerSec">
            <summary> performance counter for cache requests per second by all the clients. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Statistics.PerfStatsCollector._pcTotalClientResponsesPerSec">
            <summary> performance counter for cache responses per second by the all clients. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="instanceName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or 
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.InitializePerfCounters">
            <summary>
            Initializes the counter instances and category.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.IncrementClientRequestsPerSecStats(System.Int64)">
            <summary> 
            Increment the performance counter for Requests Per second by client. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.IncrementClientResponsesPerSecStats(System.Int64)">
            <summary> 
            Increment the performance counter for Responses received Per second by client. 
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.IncrementTotalClientRequestsPerSecStats(System.Int64)">
            <summary> 
            Increment the performance counter for Requests Per second by all the clients.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.IncrementTotalClientResponsesPerSecStats(System.Int64)">
            <summary> 
            Increment the performance counter for Responses received Per second by all the clients. 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.InstanceName">
            <summary>
            Returns true if the current user has the rights to read/write to performance counters
            under the category of object cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.UserHasAccessRights">
            <summary>
            Returns true if the current user has the rights to read/write to performance counters
            under the category of object cache.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Statistics.PerfStatsCollector.IsEnabled">
            <summary>
            Gets or Sets the value indicating whether Performance Stats collection is enabled or not.
            On initialize Performance Colloection is enabled.
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.RemoteClient.Config.ClientConfiguration">
            <summary>
            Contains the
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.RemoteClient.Config.ClientConfiguration.AddServer(Alachisoft.NCache.Web.RemoteClient.Config.RemoteServer)">
            <summary>
            Add remote server to list only if it is not present
            </summary>
            <param name="server"></param>
        </member>
        <member name="P:Alachisoft.NCache.Web.RemoteClient.Config.ClientConfiguration.ServerList">
            <summary>
            Get a copy of list of servers
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Communication.ConnectionStatus">
            <summary>
            Enumeration that defines the runtime status of connection.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Communication.ConnectionStatus.Connecting">
            <summary> The connection is in initialization phase.</summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Communication.ConnectionStatus.Connected">
            <summary> The connection is fully functional. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Communication.ConnectionStatus.Disconnected">
            <summary> The connection is disconnected. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Communication.ConnectionStatus.LoadBalance">
            <summary> This is in load balance state so dont wont queue up new request </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Communication.Broker._value">
            <summary> Object</summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.CommandReceived(Alachisoft.NCache.Web.Command.CommandResponse,Alachisoft.NCache.Common.Net.Address)">
            <summary>event handler for the Receive CommandBase Event.
            gets the command from teh _requestTable and if this command was async
            then this thread goes on to notify the initiator of this request. if
            the command was synchronous then the thread which is waiting on this
            command object is notified and command object is Remove from the _requestTable.
            
            </summary>
            <param name="result">CommandResponse indicating the response/command received from the client.
            </param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.NewSerializedMapRecieved(System.Byte[])">
            <summary>
            New hashmap recieved. 
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.NewHashmapRecieved(Alachisoft.NCache.Common.DataStructures.NewHashmap,System.Int32)">
            <summary>
            New hashmap recieved. Depending on new and old hashmap, some connections are
            disposed and some new connections are formed(not always as in some cases only buckets have
            transfered between servers). This method should be called asynchronously so the recieve thread
            will be free to recieve other command responces.
            </summary>
            <param name="newHashmap">new hashmap returned from primary server</param>
            <param name="bucketSize">bucket size</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.NewHashmapRecieved(Alachisoft.NCache.Common.DataStructures.NewHashmap)">
            <summary>
            New hashmap recieved. Depending on new and old hashmap, some connections are
            disposed and some new connections are formed(not always as in some cases only buckets have
            transfered between servers). This method should be called asynchronously so the recieve thread
            will be free to recieve other command responces.
            </summary>
            <param name="newHashmap">new hashmap returned from primary server</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.NewHashmapRecievedCompleted(System.IAsyncResult)">
            <summary>
            Called when NewHashmapRecieved callback is executed
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.SendUnregisterCommand(Alachisoft.NCache.Web.Command.CommandBase)">
            <summary>
            Incase of multiple connection we have to select the connection to which the 
            events are registered
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.InitializeResponse(Alachisoft.NCache.Web.Communication.Connection,Alachisoft.NCache.Web.Command.CommandBase)">
            <summary>
            Adds request to request table. Depending on type of type is request id is set here.
            </summary>
            <param name="connection"></param>
            <param name="command"></param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.ResetBroker(Alachisoft.NCache.Common.Net.Address)">
            <summary>
            Reset request table. only those command from table are removed who are sent to the provided
            ip address
            </summary>
            <param name="ip">ip address of server to which the connection is lost</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.TryNextServer">
            <summary>
            Try to connect with next server in config
            </summary>
            <returns>new connection</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.GetConnection(Alachisoft.NCache.Common.Net.Address,System.Boolean)">
            <summary>
            Get connection from pool. If disconnected, the function tries to make connection again.
            If strict match is set to false, any present connection will be returned from pool
            </summary>
            <param name="ip">expected connection's ip</param>
            <param name="strictMatch">specifies if ip is strictly matched or any connection from pool
            is returned incase connection not found or disconnected</param>
            <returns>connection. it may be connected or disconnected</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.TryConnecting(Alachisoft.NCache.Web.Communication.Connection,System.Exception@)">
            <summary>
            Try connecting to the connection provided
            </summary>
            <returns>True is connection was successful, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.ConnectRemoteServer(Alachisoft.NCache.Web.Communication.Connection,Alachisoft.NCache.Web.RemoteClient.Config.RemoteServer,System.Boolean)">
            <param name="registerNotifs">if re registring of events is needed</param>
            <returns>true if connecion is established, false otherwise</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.CheckRetryConnectionDelay">
            <summary>
            Checks if the retry connection interval is over and sets retry connection flag to true.
            </summary>        
        </member>
        <member name="M:Alachisoft.NCache.Web.Communication.Broker.ConnectRemoteServer(Alachisoft.NCache.Web.Communication.Connection,System.Net.IPAddress,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Exception@)">
            <summary>
            Try to connect with the server. The connection object will be used to connect with the ip
            address on port provided
            </summary>
            <param name="connection">This object will be used to connect with server</param>
            <param name="addr">ip address of server</param>
            <param name="port">port on which socket server is running</param>
            <param name="balanceNodes">balance clients load on servers</param>
            <param name="importHashmap">if hashmap is to be fetched from connecting server</param>
            <param name="registerNotifs">if re registring of events is needed</param>
            <returns>true if connecion is established, false otherwise</returns>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.NCache">
            <summary>
            Provides static methods and properties to aid with clustered cache initialization and 
            access. This class cannot be inherited.
            </summary>
            <remarks>In a Web application more than one instances of a clustered cache can be created per application domain, 
            and they remain valid as long as the application domain remains active. A clustered cache makes 
            sharing and caching data in a cluster as simple as on a single server. In addition to a clustered cache
            that resides on multiple nodes, NCache also makes it possible for different applications or application
            domains in a single application to share and cache data seamlessly.
            <para>
            From a development perspective NCache provides a simple interface for integration with application. A
            call to <see cref="M:Alachisoft.NCache.Web.Caching.NCache.InitializeCache(System.String)"/> requires just a registration id. The registration id is 
            specified at the time of desgining the cluster or cache. See the documentation for NCache for more information on 
            designing and implementing clusters. A scheme like this shields the development process from the complexities
            of cluster designs. Moreover it is possible to run the same application on different underlying cache types
            without actually changing a single line in the source code.
            </para> 
            </remarks>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.NCache.s_webCache">
            <summary> Underlying implementation of NCache. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.NCache.s_webCaches">
            <summary> Contains all initialized instances of caches. They can be accessed using their cache-ids </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.NCache.InitializeCache(System.String)">
            <summary>
            Initializes the instance of <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> for this application.
            </summary>
            <param name="cacheId">The identifier for the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>
            item to initialize.</param>
            <remarks>
            The <paramref name="cacheId"/> parameter represents the registration/config id of the cache. 
            Depending upon the configuration the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object is 
            created inproc or outproc.
            <para>
            Calling this method twice with the same <paramref name="cacheId"/> increments the reference count
            of the cache. The number of <see cref="M:Alachisoft.NCache.Web.Caching.NCache.InitializeCache(System.String)"/> calls must be balanced by a corresponding
            same number of <see cref="M:Alachisoft.NCache.Web.Caching.Cache.Dispose"/> calls.
            </para>
            <para>
            Multiple cache instances can be inititalized within the same application domain. If multiple cache 
            instances are initialized, <see cref="!:NCache.Cache"/> refers to the first instance of the cache.
            </para>
            <para>
            <b>Note:</b> When starting a <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> as outproc, this method 
            attempts to start NCache service on the local machine if it is not already running. However it does not
            start the cache automatically. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cacheId"/> is a null reference (Nothing in Visual Basic).</exception>
            <example> This sample shows how to use the <see cref="M:Alachisoft.NCache.Web.Caching.NCache.InitializeCache(System.String)"/> method inside a sample Web application.
            <code>
            
            public override void Init()
            {
            	// A cache with id 'myCache' is already registered.
            	try
            	{
            		Alachisoft.NCache.Web.Caching.Cache theCache = NCache.InitializeCache("myCache");
            	}
            	catch(Exception e)
            	{
            		// Cache is not available.
            	}
            }
                 
            </code>
            </example>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.NCache.Caches">
            <summary>
            Returns the collection of clustered caches for this application.
            </summary>
            <remarks>
            One instance of this class is created per application domain, and it remains 
            valid as long as the application domain remains active. Information about an 
            instance of this class is available through the Caches property of the 
            <see cref="T:Alachisoft.NCache.Web.Caching.NCache"/> object. 
            </remarks>
            <value>The instance of <see cref="T:Alachisoft.NCache.Web.Caching.CacheCollection"/> for 
            this Web application.</value>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled">
            <summary>
            Flag that indicates whether exceptions are enabled or not.
            </summary>
            <remarks>
            If this property is set the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/> object
            throws exceptions from public operations. If not set no exception is thrown and the
            operation fails silently. Setting this flag is especially helpful during 
            development phase of application since exceptions provide more information about
            the specific causes of failure. 
            </remarks>
            <value>true if exceptions are enabled, otherwise false.</value>
            <example> This sample shows how to set the <see cref="P:Alachisoft.NCache.Web.Caching.NCache.ExceptionsEnabled"/> property.
            <code>
            
            NCache.Cache.ExceptionsEnabled = true;
                 
            </code>
            </example>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheServerInfo">
            <summary>
            Provides the properties to aid the ServerList property in CacheInitParams
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheServerInfo.#ctor(System.String,System.Int32)">
             <summary>
            Initializes the instance of <see cref="T:Alachisoft.NCache.Web.Caching.CacheServerInfo"/> for this application.
             </summary>
             <param name="name">String IP/Name of the server to be connected with</param>
             <param name="port">Port for the server to be connected with </param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheServerInfo.#ctor">
            <summary>
            Initializes the instance of <see cref="T:Alachisoft.NCache.Web.Caching.CacheServerInfo"/> for this application.
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheServerInfo.Port">
            <summary>
            Get/Set the Port 
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheServerInfo.Name">
            <summary>
            Get the Name/IP of the server
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheItem">
            <summary>
            Class that represents a cached item including its dependencies, 
            expiration and  eviction information
            </summary>
            <example>
            You can create an instance of CacheItem class and <see cref="M:Alachisoft.NCache.Web.Caching.Cache.Add(System.String,System.Object)"/> it to the <see cref="T:Alachisoft.NCache.Web.Caching.Cache"/>
            <code>
            object someData = new object();
            CacheItem item = new CacheItem(someData);
            item.SlidingExpiration = new TimeSpan(0,5,0);
            item.Priority = CacheItemPriority.High;
            item.ItemRemoveCallback = onRemove;
            Cache cache = NCache.InitializeCache("myCache");
            cache.Add("someData", item);
            </code>
            </example>
            <requirements>
            <constraint>This member is not available in SessionState edition.</constraint> 
            </requirements>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._v">
            <summary> The actual object provided by the client application </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._abs">
            <summary> Absolute expiration for the object. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._sld">
            <summary> Sliding expiration for the object. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._p">
            <summary> Priority for the object. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._creationTime">
            <summary> Time at which this item was created. </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.CacheItem._lastModifiedTime">
            <summary> Time at which this item was Last modified. </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheItem.#ctor(System.Object)">
            <summary>Costructor</summary>
            <param name="value">Actual object to be stored in cache</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheItem.SetCacheDataNotification(Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback,Alachisoft.NCache.Runtime.Events.EventType,Alachisoft.NCache.Runtime.Events.EventDataFilter)">
            <summary>
            You can use this to notify applications when their objects are updated or removed in the cache.
            Callbacks can be registered against <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> for the key the items is inserted to.
            To register different <see cref="T:Alachisoft.NCache.Runtime.Events.EventDataFilter"/> for different <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/>, you can call this function mutiple times 
            with a different <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/>.
            Callback are overriden for the same <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> if called again.
            <see cref="F:Alachisoft.NCache.Runtime.Events.EventType.ItemAdded"/> is not supported yet.
            </summary>
            <param name="callback">Callback to be raised when an item is updated or removed</param>
            <param name="eventType"><see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> the callback is registered against</param>
            <param name="datafilter"><see cref="T:Alachisoft.NCache.Runtime.Events.EventDataFilter"/> for every <see cref="T:Alachisoft.NCache.Runtime.Events.EventType"/> registered against</param>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.CacheItem.Clone">
            <summary>
            Creates a shallow copy of CacheItem
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.Value">
            <summary>The actual object provided by the client application.</summary>
            <remarks>This value must be serializable, otherwise <see cref="T:System.ArgumentException"/> 
            is thrown when you will try to add or insert the CacheItem.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.AbsoluteExpiration">
            <summary>The time at which the added object expires 
            and is removed from the cache.
            </summary>
            <value>The default value is Cache.NoAbsoluteExpiration</value>
            <remarks>
            You cannot set both sliding and absolute expirations on the same cached item. 
            If you do so, an <see cref="T:System.ArgumentException"/> is thrown when you will try to
            add or insert the CacheItem.
            </remarks>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.SlidingExpiration">
            <summary>The interval between the time the added object was last 
            accessed and when that object expires. If this value is the equivalent of 
            20 minutes, the object expires and is removed from the cache 20 minutes 
            after it is last accessed. </summary>
            <value>The default value is Cache.NoSlidingExpiration.</value>
            <remarks> If the slidingExpiration property is set to NoSlidingExpiration, 
            sliding expiration is disabled. If you set the <paramref name="slidingExpiration"/> 
            parameter to less than <see cref="F:System.TimeSpan.Zero"/>, or the equivalent of 
            more than one year, an <see cref="T:System.ArgumentOutOfRangeException"/> is thrown when you will try to
            add or insert the CacheItem.
            You cannot set both sliding and absolute expirations on the 
            same cached item. If you do so, an <see cref="T:System.ArgumentException"/> is thrown when you will try to
            add or insert the CacheItem.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.Priority">
            <summary>The relative cost of the object, as expressed by the enumeration.
            The cache uses this value when it evicts objects; objects with a lower cost
            are removed from the cache before objects with a higher cost.</summary>
            <value>The default value is CacheItemPriority.Default.</value>
            <remarks>This property will be used only when the eviction policy is set to 
            priority in the configuration.</remarks>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.CacheItemRemovedCallback">
            <summary>A delegate that, if provided, is called when an object is removed
            from the cache. You can use this to notify applications when their
            objects are deleted from the cache. </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.CacheItemUpdatedCallback">
            <summary>A delegate that, if provided, is called when an object is updated
            in the cache. You can use this to notify applications when their
            objects are updated in the cache. </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.CreationTime">
            <summary>
            Get the cache item creation time
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheItem.LastModifiedTime">
            <summary>
            Get the cache item last modified time
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Util.HashtableUtil">
            <summary>
            Provide methods to convert hashtable into a string form, and repopulating
            hastable from string. The conversion do not save type information and assumes
            that keys are of int type, while values are of string type
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Util.HashtableUtil.ToString(System.Collections.Hashtable)">
            <summary>
            Convert hastable to a string form
            </summary>
            <param name="table">Hashtable containg int key and string value</param>
            <returns>String representation of hashtable</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Util.HashtableUtil.FromString(System.String)">
            <summary>
            Populate a hastable from its string representation
            </summary>
            <param name="rep">String representation of hashtable</param>
            <returns>Hashtable formed from string representation</returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Util.HelperFxn.ToString(System.Byte[])">
            <summary>
            Converts the byte into string using UTF8Encoding
            </summary>
            <param name="buffer">buffer containing values to be converted</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Util.HelperFxn.ToBytes(System.String)">
            <summary>
            Converts byte array to string using UTF8Encoding
            </summary>
            <param name="data">values to be converted to byte</param>
            <returns></returns>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Util.HelperFxn.ToInt32(System.Byte[])">
            <summary>
            Converts the specified byte array to int. 
            It is callers responsibilty to ensure that values can be converted to Int32
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.EventArg">
            <summary>
            Parent of <see cref="!:CQEventArg"/> and <see cref="T:Alachisoft.NCache.Web.Caching.CacheEventArg"/>
            Contains the necessary information related to the event being raised
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventArg.CacheName">
            <summary>
            Name of the cache the event is raised against
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventArg.EventType">
            <summary>
            Event Type the event is raised against
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventArg.Item">
            <summary>
            Contains the item if the event was registered against <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.Metadata"/> or <see cref="F:Alachisoft.NCache.Runtime.Events.EventDataFilter.DataWithMetadata"/>
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.EventArg.OldItem">
            <summary>
            Only applicable for <see cref="!:EventType.ItemUpdated"/>
            Otherwise it will be null
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.CacheEventArg">
            <summary>
            This object is recieved when an even is raised and delegate <see cref="T:Alachisoft.NCache.Web.Caching.CacheDataNotificationCallback"/> is executed
            CacheEventArg contains necessary information to identify the event and perform necessary actions accordingly.
            It inherits <see cref="T:Alachisoft.NCache.Web.Caching.EventArg"/> which is also a parent of <see cref="!: CQEventArg"/>
            This class is consistent for both selective and general events
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventArg.Descriptor">
            <summary>
            Only applicable for general events otherwise it will be null
            </summary>
        </member>
        <member name="P:Alachisoft.NCache.Web.Caching.CacheEventArg.CacheItemRemovedReason">
            <summary>
            Only applicable for <see cref="!:EventType.ItemRemove"/>
            </summary>
        </member>
        <member name="T:Alachisoft.NCache.Web.Caching.Statistics.PerfInstaller">
            <summary>
            Summary description for PerfInstaller.
            </summary>
        </member>
        <member name="F:Alachisoft.NCache.Web.Caching.Statistics.PerfInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Statistics.PerfInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alachisoft.NCache.Web.Caching.Statistics.PerfInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
