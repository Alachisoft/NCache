<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration>
  <appSettings>
    <!--  
      Application level settings to be defined here 
     -->
    <!-- 
      Specify the port at which Cache Server will listen for the incoming connection requests
     -->
    <add key="NCacheServer.Port" value="9800"/>
    <!-- 
      Specify the port at which Cache Management Server will listen for the incoming connection requests
     -->
    <add key="NCacheServer.ManagementPort" value="8250"/>
    <!-- 
      Specify send buffer size of the connected client socket, in bytes.
     -->
    <add key="NCacheServer.SendBufferSize" value="131072"/>
    <!-- 
      Specify whether this service will log license information for the clients.
     -->
    <add key="NCacheServer.LicenseLogging" value="false"/>
    <!-- 
      Specify receive buffer size of the connected client socket, in bytes.
     -->
    <add key="NCacheServer.ReceiveBufferSize" value="131072"/>
    <!-- 
      When your machine has more than one network cards, you can inform NCache
      which interface to use for cluster-wide communication. In order to do so, 
      provide the IP Address you want the cluster server to bind with.
     -->
    <add key="NCacheServer.BindToIP" value="<IP>"/>
    <!-- 
      All the nodes in NCache cluster can establish two connections with each node. 
      This can increase the TCP throughput and thus improve the overall performance.
      By default single connection is established. To enable the use of dual connections,
      un comment the following.
     -->
    <!-- 
    <add key="NCacheServer.EnableDualSocket" value="true"/>
     -->
    <!-- 
      <add key="NCacheServer.CacheUser" value="domain\userId"/>
      <add key="NCacheServer.CachePassword" value="password"/>
     -->
    <!-- 
      Some performance counters are disabled by default but they can be really helpful to see the NCache behavior 
      over the network. 
      
      These counters include: -
      1. socket send time (time taken for the last send operation)
      2. socket receive time (time taken for the last receive operation)
      3. bytes sent / second 
      4. bytes received / second
      5. naggling message count (number of messages bundled together in the last socket send operation)
      
      These counters help find the source of the problem in case we see the cluster is not performing as expected.
      To enable these counters, uncomment the following.
     -->
    <!-- <add key="NCacheServer.EnableDebuggingCounters" value="true"/> -->
    <!-- 
    In case if any send operation takes long time on socket creating a deadlock, this socket can be reset using bad client detection property with a combination of client socket send time out property.
    Default value id false, the behavior is turned off.
     -->
    <add key="NCacheServer.EnableBadClientDetection" value="false"/>
    <!-- 
    ClientSocketSendTimeOut is the interval after which socket is reset in case of deadlock.
    Default value is 10 sec. ClientSocketSendTimeOut cannot be less than one.
     -->
    <add key="NCacheServer.ClientSocketSendTimeOut" value="10"/>
    <!-- 
    On the server side a priority queue is used between events and cache operations. The following property defines the event ratio.
    Default value is 30. EventPriorityRatio cannot be less than 1.
     -->
    <add key="NCacheServer.EventPriorityRatio" value="30"/>
    <!-- 
    Server now sends bulk events to client, but the bulk size is configurable. This is only available is client version 4124 or above.
    Default value is 50, EventBulkCount cannot be less than 1.
     -->
    <add key="NCacheServer.EventBulkCount" value="50"/>
    <!-- 
    Defines the interval for bulk event collection. Default value is 2 seconds. BulkEventCollectionInterval cannot be less than 1.
     -->
    <add key="NCacheServer.BulkEventCollectionInterval" value="2"/>
    <!-- 
    Expired items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation.
     -->
    <add key="NCacheServer.ExpirationBulkRemoveSize" value="10"/>
    <!-- 
    Expired items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
     -->
    <add key="NCacheServer.ExpirationBulkRemoveDelay" value="0"/>
    <!-- 
    During eviction items are removed in bulk. Specify the size of the bulk operation i.e. how many items should
    be removed in one bulk operation. EvictionBulkRemoveSize should be specified in multiple of 300
     -->
    <add key="NCacheServer.EvictionBulkRemoveSize" value="10"/>
    <!-- 
    During eviction items are removed in bulk. This may affect the performance of user operations during expirations. This
    delay specified (in seconds) causes a delay between two consecutive bulk remove operations. 
     -->
    <add key="NCacheServer.EvictionBulkRemoveDelay" value="0"/>
    <!-- 
    For Mirror and Partitioned Replica Cache Topologies items are asynchronously replicated to the backup nodes in bulk. This
    is the number of items in one bulk sent to the backup node in single async call.
     -->
    <add key="NCacheServer.BulkItemsToReplicate" value="50"/>
    <!--  Following four options allows a user to get information about data in cache having sliding expiration. These counters
    help finding and controlling following tasks...
    i.   How many items are present in cache, being not accessed since given interval or more.
    ii.  Log all those keys being not accessed since given interval or more.
    iii. Collect and Log above mentioned data from cache after given interval of time.
     -->
    <!-- (1) Enable/Disable collecting LastAccessCount data  -->
    <add key="NCacheServer.EnableCacheLastAccessCount" value="false"/>
    <!-- (2) Enable Logging of Keys into a log file (created under logs folder). This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true" -->
    <add key="NCacheServer.EnableCacheLastAccessCountLogging" value="false"/>
    <!-- (3) Time interval for a key not been accessed for last given minutes. Value is in minutes. A value of 30 would allow NCache 
    server to collect all those keys that are idle since last 30 or more minutes. This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true" -->
    <add key="NCacheServer.CacheLastAccessCountInterval" value="10"/>
    <!-- (4) Logging interval to allow logging in multiple intervals. Its value is not in minutes. Its value is number of clean intervals
    after which keys should be logged into file. CleanInterval is specified under Cache's "Policies" tab.
    If value of this variable is "4" and clean interval is 15(secs).Logging would happen after every 60 secs.    
    Interval based logging allows NCache to perform without any performance degradation despite certain information
    is collected from core components to perform this action .This option would apply only if 
    NCacheServer.EnableCacheLastAccessCount is set "true" AND NCacheServer.EnableCacheLastAccessCountLogging is set "true"  -->
    <add key="NCacheServer.CacheLastAccessLogInterval" value="40"/>
    <!-- A buffer having size greater than 80Kb is created on the Large Object heap(LOH). Garbage Collector doesn't compact
    the large heap for its better performance. Therefore NCache uses a pool for large buffers. NCache reserves two buffers per
    client. These buffers are allocated through LOH buffer pool. LOHPoolSize refers to the initial size of the pool i.e how many
    buffers are allocated initially. LOH pool can increase its size by LOHPoolSize on demand.
     -->
    <add key="NCacheServer.LOHPoolSize" value="40"/>
    <!-- 
    LOHPoolBufferSize is the size of an individual buffer allocated by LOH Pool. Default buffer size is 512Kb.
     -->
    <add key="NCacheServer.LOHPoolBufferSize" value="512"/>
    <!-- 
    CacheSizeThreshold is the size of cache in percentage of total cache size. When this threshold is reached a warning message is logged into system
    event log. No warning message is logged if the following line is commented.
     -->
    <add key="NCacheServer.CacheSizeThreshold" value="80"/>
    <!-- 
    CacheSizeReportInterval is the interval in minutes during which CacheSizeThreshold warning is issued once. If cache size
    falls below CacheSizeThreshold due to eviction and again crosses the CacheSizeThreshold limit during this interval no warning
    is generated. The minimum value is 5 minutes.
     -->
    <add key="NCacheServer.CacheSizeReportInterval" value="15"/>
    <!-- 
    Enables/Disables the logging of client connectivity events into event viewer. By default these events are
    disabled.
     -->
    <add key="NCacheServer.LogClientEvents" value="false"/>
    <!-- 
    Specifies the level of events which are logged into event viewer. There are three levels of events
    i- error    : Only errors will be logged
    ii- warning : Errors and Warnings will be logged
    iii- all    : all events will be logged
     -->
    <add key="NCacheServer.EventLogLevel" value="all"/>
    <!-- 
    Value of seconds after which service should check if it needs to do a forced garbage collection.
    This property dictates how frequent you want to check if a forced Garbage Collection is required or not.    
    Default value is 20 seconds. Minimum possible value is 5 seconds. 
    <add key="NCacheServer.ForcedGCInterval" value="20"/>
     -->
    <!-- 
    To enable error Logging simply set "EnableLogs" key to true
    <add key="EnableLogs" value="true"/>
    
    Detailed logs include all level of logs; to enable it simply set "EnableDetailedLogs" key to true
    <add key="EnableDetailedLogs" value="true"/>

    In-memory Logging buffered size; will write in log files when full. For immediate file writes set to '1'
    <add key="BufferSize" value="5"/>
     -->
    <!-- 
      If a request, sent to another node of cluster, is taking long time then we can send an enquiry request to that node asking about the status of the request. Status can be
      - request not received by that node
      - request received but not yet processed
      - request received and response sent (means response is not received by this node)
      According to the request status, action can be taken 
      - whether to wait more
      - re-send the request
      - return
      
      If this flag is false, request status is not enquired and thus will wait for the response for cluster timeout (60 sec by default)
     -->
    <add key="NCacheServer.AllowClusterRequestEnquiry" value="false"/>
    <!-- 
     Applies only when "NCacheServer.AllowRequestEnquiry" flag is true.
     Total request timeout (60 sec by default) is divided into chunks of this interval. After every interval request status is asked and action is taken accordingly. If responses are received earlier  than request returns and no more intervals are valid.
     -->
    <add key="NCacheServer.ClusterRequestEnquiryInterval" value="10"/>
    <!-- 
     Applies only when "NCacheServer.AllowRequestEnquiry" flag is true. When this flag is true, at least
     1 retry is made even when you specify a value <= 0
     Total number of request enquiry retries. One try is made after each interval specified above.
     After completing retries, request waits for remaining request timeout if response is still not received.
     -->
    <add key="NCacheServer.ClusterRequestEnquiryRetries" value="1"/>
    <!-- 
    By default SQLDependency creates a new Service whenever it starts but you can also use the existing SQL Service.
    In that case NCache will connect with pre-created service with following naming convention
    "NCacheSQLService-[ip-address]". If you want to change the sql service name prefix you can specify that against NCacheServer.NCacheSQLNotificationService key
     -->
    <add key="NCacheServer.NCacheSQLNotificationService" value="NCacheSQLService"/>
    <!-- 
    By default SQLDependency creates a new Queue whenever it starts but you can also use the existing SQL Queue.
    In that case NCache will connect with existing queue with following naming convention
    "NCacheSQLQueue-[ip-address]". If you want to change the sql queue name prefix you can specify that against NCacheServer.NCacheSQLNotificationQueue key
     -->
    <add key="NCacheServer.NCacheSQLNotificationQueue" value="NCacheSQLQueue"/>
    <!-- 
    NCacheServer.ResponseDataSize indicates the size of a response for a given request.
    If the response size is larger than the given limit then it will be divided into smaller
    chunks and data will be sent back to the client in multiple responses for the same request.
    This will improve the performance because the larger the response size is the longer it
    will take time to serialize the response. However, these multiple responses will be merged
    by NCache Client as a single response.   
    Here it takes value in MB’s. Default size is 1024MB.
    NOTE: .NET serialization fails to serialize if the response size is larger than 1.9 GB.
     -->
    <add key="NCacheServer.ResponseDataSize" value="1024"/>
    <!-- 
    NCacheServer.SnapshotPoolingCacheSize can be used to specify the size of the cache (in terms of number of items) for enabling enumeration snapshot pooling. 
    It will help in deciding when to create a pool of snapshots for enumeration purpose.  When a new enumerator is taken on cache we provide it with a 
    snapshot of cache, every time a new enumerator is taken on cache but when this threshold size is crossed we will create a pool of snapshots that will hold
    snapshots based on time slicing and snapshots will be provided from the pool when an enumerator needs one. 
    Default Size is 100000 items in cache
     -->
    <add key="NCacheServer.EnableSnapshotPoolingCacheSize" value="100000"/>
    <!-- 
    NCacheServer.SnapshotPoolSize can be used to specify the number of snapshots allowed in the pool for enumeration.  When the maximum size is reached 
    we won’t allow another snapshot to be added to the pool till another existing snapshot in the pool has been removed from it.     
    Default Size is 10 snapshots in cache snapshot pool.
     -->
    <add key="NCacheServer.SnapshotPoolSize" value="10"/>
    <!-- 
    NCacheServer.SnapshotCreationThreshold can be used to specify after how many seconds a new snapshot will be added to pool for enumeration purpose.
    Same cache snapshot from the pool is provided to all enumerators on cache until the threshold time is elapsed. Any enumerator that requests 
    a snapshot after that will get a new snapshot from the pool.
    Default size is 30 seconds.
     -->
    <add key="NCacheServer.SnapshotCreationThreshold" value="30"/>
    <!-- 
    NCacheServer.EnumeratorChunkSize can be used to specify the chunk size as in number of items returned to enumerator from cache server. Once the enumerator is done enumerating through a chunk of data it gets the next chunk from the cache for that 
    particular enumerator and continues enumerating.
    Default size is 1000 items returned in each chunk.
     -->
    <add key="NCacheServer.EnumeratorChunkSize" value="1000"/>
    <add key="NCacheServer.StateTransferDataSizePerThread" value="5"/>
    <add key="NCacheServer.UninstallInProgress" value="false"/>
    <!-- When a cache is started in its own separate process it is assigned a Management Port (Two incase of Partitioned of Replica topology). 
      This port is assigned from a range of ports which can be configured by setting the below keys. ManagementPortLower is the starting port 
      from which the first free port available will be consumed. The ManagementPortUpper is the upper limit. -->
    <add key="NCacheServer.ManagementPortLower" value="8300"/>
    <add key="NCacheServer.ManagementPortUpper" value="8400"/>
    <!--   Value of seconds after which service should check if it needs to do a forced garbage collection.
    This property dictates how frequent you want to check if a forced Garbage Collection is required or not.    
    Default value is 20 seconds. Minimum possible value is 5 seconds. 
    <add key="NCacheServer.ForcedGCInterval" value="20"/> -->
    <!--   To enable error Logging simply set "EnableLogs" key to true
    <add key="EnableLogs" value="true"/>
    
    Detailed logs include all level of logs; to enable it simply set "EnableDetailedLogs" key to true
    <add key="EnableDetailedLogs" value="true"/>

    In-memory Logging buffered size; will write in log files when full. For immediate file writes set to '1'
    <add key="BufferSize" value="5"/> -->
    <!-- NCacheServer.ServiceGCCollectionInterval can be used for limiting the 
GC collection on a specified interval. This value is in minutes. 
GC collection can be stopped by providing value 0. -->
    <add key="NCacheServer.ServiceGCCollectionInterval" value="180"/>
    <!-- Reader Expiration flag shows the amount of time in minutes after which unused readers will expire to avoid memory consumption. 
If flag's value is -1 then readers will remain in memory unless user explicitly dispose them. -->
    <!-- <add key="NCacheServer.ReaderExpiration" value="1"/> -->
    <!-- This is server side polling notification interval for change events. This value is in seconds.
Minimum value is 1. -->
    <add key="NCacheServer.NotificationEventInterval" value="1"/>
  </appSettings>
  <runtime>
    <gcServer enabled="true"/>
    <gcConcurrent enabled="false"/>
    <generatePublisherEvidence enabled="false"/>
  </runtime>
</configuration>
